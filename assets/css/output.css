/*! tailwindcss v4.1.15 | MIT License | https://tailwindcss.com */
@layer properties;
@layer theme, base, components, utilities;
@layer theme {
  :root, :host {
    --font-sans: ui-sans-serif, system-ui, sans-serif, "Apple Color Emoji",
      "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
    --font-mono: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono",
      "Courier New", monospace;
    --color-red-50: oklch(97.1% 0.013 17.38);
    --color-red-400: oklch(70.4% 0.191 22.216);
    --color-red-500: oklch(63.7% 0.237 25.331);
    --color-red-600: oklch(57.7% 0.245 27.325);
    --color-red-700: oklch(50.5% 0.213 27.518);
    --color-yellow-100: oklch(97.3% 0.071 103.193);
    --color-gray-50: oklch(98.5% 0.002 247.839);
    --color-gray-200: oklch(92.8% 0.006 264.531);
    --color-gray-300: oklch(87.2% 0.01 258.338);
    --color-gray-400: oklch(70.7% 0.022 261.325);
    --color-gray-500: oklch(55.1% 0.027 264.364);
    --color-black: #000;
    --color-white: #fff;
    --spacing: 0.25rem;
    --text-sm: 0.875rem;
    --text-sm--line-height: calc(1.25 / 0.875);
    --text-lg: 1.125rem;
    --text-lg--line-height: calc(1.75 / 1.125);
    --text-xl: 1.25rem;
    --text-xl--line-height: calc(1.75 / 1.25);
    --text-2xl: 1.5rem;
    --text-2xl--line-height: calc(2 / 1.5);
    --font-weight-semibold: 600;
    --font-weight-bold: 700;
    --radius-xl: 0.75rem;
    --radius-2xl: 1rem;
    --ease-out: cubic-bezier(0, 0, 0.2, 1);
    --ease-in-out: cubic-bezier(0.4, 0, 0.2, 1);
    --default-transition-duration: 150ms;
    --default-transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    --default-font-family: var(--font-sans);
    --default-mono-font-family: var(--font-mono);
  }
}
@layer base {
  *, ::after, ::before, ::backdrop, ::file-selector-button {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
    border: 0 solid;
  }
  html, :host {
    line-height: 1.5;
    -webkit-text-size-adjust: 100%;
    tab-size: 4;
    font-family: var(--default-font-family, ui-sans-serif, system-ui, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji");
    font-feature-settings: var(--default-font-feature-settings, normal);
    font-variation-settings: var(--default-font-variation-settings, normal);
    -webkit-tap-highlight-color: transparent;
  }
  hr {
    height: 0;
    color: inherit;
    border-top-width: 1px;
  }
  abbr:where([title]) {
    -webkit-text-decoration: underline dotted;
    text-decoration: underline dotted;
  }
  h1, h2, h3, h4, h5, h6 {
    font-size: inherit;
    font-weight: inherit;
  }
  a {
    color: inherit;
    -webkit-text-decoration: inherit;
    text-decoration: inherit;
  }
  b, strong {
    font-weight: bolder;
  }
  code, kbd, samp, pre {
    font-family: var(--default-mono-font-family, ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace);
    font-feature-settings: var(--default-mono-font-feature-settings, normal);
    font-variation-settings: var(--default-mono-font-variation-settings, normal);
    font-size: 1em;
  }
  small {
    font-size: 80%;
  }
  sub, sup {
    font-size: 75%;
    line-height: 0;
    position: relative;
    vertical-align: baseline;
  }
  sub {
    bottom: -0.25em;
  }
  sup {
    top: -0.5em;
  }
  table {
    text-indent: 0;
    border-color: inherit;
    border-collapse: collapse;
  }
  :-moz-focusring {
    outline: auto;
  }
  progress {
    vertical-align: baseline;
  }
  summary {
    display: list-item;
  }
  ol, ul, menu {
    list-style: none;
  }
  img, svg, video, canvas, audio, iframe, embed, object {
    display: block;
    vertical-align: middle;
  }
  img, video {
    max-width: 100%;
    height: auto;
  }
  button, input, select, optgroup, textarea, ::file-selector-button {
    font: inherit;
    font-feature-settings: inherit;
    font-variation-settings: inherit;
    letter-spacing: inherit;
    color: inherit;
    border-radius: 0;
    background-color: transparent;
    opacity: 1;
  }
  :where(select:is([multiple], [size])) optgroup {
    font-weight: bolder;
  }
  :where(select:is([multiple], [size])) optgroup option {
    padding-inline-start: 20px;
  }
  ::file-selector-button {
    margin-inline-end: 4px;
  }
  ::placeholder {
    opacity: 1;
  }
  @supports (not (-webkit-appearance: -apple-pay-button))  or (contain-intrinsic-size: 1px) {
    ::placeholder {
      color: currentcolor;
      @supports (color: color-mix(in lab, red, red)) {
        & {
          color: color-mix(in oklab, currentcolor 50%, transparent);
        }
      }
    }
  }
  textarea {
    resize: vertical;
  }
  ::-webkit-search-decoration {
    -webkit-appearance: none;
  }
  ::-webkit-date-and-time-value {
    min-height: 1lh;
    text-align: inherit;
  }
  ::-webkit-datetime-edit {
    display: inline-flex;
  }
  ::-webkit-datetime-edit-fields-wrapper {
    padding: 0;
  }
  ::-webkit-datetime-edit, ::-webkit-datetime-edit-year-field, ::-webkit-datetime-edit-month-field, ::-webkit-datetime-edit-day-field, ::-webkit-datetime-edit-hour-field, ::-webkit-datetime-edit-minute-field, ::-webkit-datetime-edit-second-field, ::-webkit-datetime-edit-millisecond-field, ::-webkit-datetime-edit-meridiem-field {
    padding-block: 0;
  }
  ::-webkit-calendar-picker-indicator {
    line-height: 1;
  }
  :-moz-ui-invalid {
    box-shadow: none;
  }
  button, input:where([type="button"], [type="reset"], [type="submit"]), ::file-selector-button {
    appearance: button;
  }
  ::-webkit-inner-spin-button, ::-webkit-outer-spin-button {
    height: auto;
  }
  [hidden]:where(:not([hidden="until-found"])) {
    display: none !important;
  }
}
@layer utilities {
  .drawer-side {
    :where(&) {
      @layer daisyui.component {
        overflow-x: hidden;
        overflow-y: hidden;
      }
    }
    @layer daisyui.component {
      pointer-events: none;
      visibility: hidden;
      position: fixed;
      inset-inline-start: calc(0.25rem * 0);
      top: calc(0.25rem * 0);
      z-index: 10;
      grid-column-start: 1;
      grid-row-start: 1;
      display: grid;
      width: 100%;
      grid-template-columns: repeat(1, minmax(0, 1fr));
      grid-template-rows: repeat(1, minmax(0, 1fr));
      align-items: flex-start;
      justify-items: start;
      overscroll-behavior: contain;
      background-color: transparent;
      opacity: 0%;
      transition: opacity 0.2s ease-out 0.1s allow-discrete, visibility 0.3s ease-out 0.1s allow-discrete;
      height: 100vh;
      height: 100dvh;
      > .drawer-overlay {
        position: sticky;
        top: calc(0.25rem * 0);
        cursor: pointer;
        place-self: stretch;
        background-color: oklch(0% 0 0 / 40%);
      }
      > * {
        grid-column-start: 1;
        grid-row-start: 1;
      }
      > *:not(.drawer-overlay) {
        will-change: transform;
        transition: translate 0.3s ease-out, width 0.2s ease-out;
        translate: -100%;
        [dir="rtl"] & {
          translate: 100%;
        }
      }
    }
  }
  .fab {
    @layer daisyui.component {
      pointer-events: none;
      position: fixed;
      inset-inline-end: calc(0.25rem * 4);
      bottom: calc(0.25rem * 4);
      z-index: 999;
      display: flex;
      flex-direction: column-reverse;
      align-items: flex-end;
      gap: calc(0.25rem * 2);
      font-size: var(--text-sm);
      line-height: var(--tw-leading, var(--text-sm--line-height));
      white-space: nowrap;
      > * {
        pointer-events: auto;
        display: flex;
        align-items: center;
        gap: calc(0.25rem * 2);
        &:hover, &:has(:focus-visible) {
          z-index: 1;
        }
      }
      > [tabindex] {
        &:first-child {
          position: relative;
          display: grid;
          transition-property: opacity, visibility, rotate;
          transition-duration: 0.2s;
          transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
        }
      }
      .fab-close {
        position: absolute;
        inset-inline-end: calc(0.25rem * 0);
        bottom: calc(0.25rem * 0);
      }
      .fab-main-action {
        position: absolute;
        inset-inline-end: calc(0.25rem * 0);
        bottom: calc(0.25rem * 0);
      }
      &:focus-within {
        &:has(.fab-close), &:has(.fab-main-action) {
          > [tabindex] {
            rotate: 90deg;
            opacity: 0%;
          }
        }
        > [tabindex]:first-child {
          pointer-events: none;
        }
        > :nth-child(n + 2) {
          visibility: visible;
          --tw-scale-x: 100%;
          --tw-scale-y: 100%;
          --tw-scale-z: 100%;
          scale: var(--tw-scale-x) var(--tw-scale-y);
          opacity: 100%;
        }
      }
      > :nth-child(n + 2) {
        visibility: hidden;
        --tw-scale-x: 80%;
        --tw-scale-y: 80%;
        --tw-scale-z: 80%;
        scale: var(--tw-scale-x) var(--tw-scale-y);
        opacity: 0%;
        transition-property: opacity, scale, visibility;
        transition-duration: 0.2s;
        transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
        &.fab-main-action, &.fab-close {
          --tw-scale-x: 100%;
          --tw-scale-y: 100%;
          --tw-scale-z: 100%;
          scale: var(--tw-scale-x) var(--tw-scale-y);
        }
      }
      > :nth-child(3) {
        transition-delay: 30ms;
      }
      > :nth-child(4) {
        transition-delay: 60ms;
      }
      > :nth-child(5) {
        transition-delay: 90ms;
      }
      > :nth-child(6) {
        transition-delay: 120ms;
      }
    }
  }
  .drawer-open {
    @layer daisyui.modifier {
      :where(& > .drawer-side) {
        overflow-y: auto;
      }
      > .drawer-toggle {
        display: none;
        & ~ .drawer-side {
          pointer-events: auto;
          visibility: visible;
          position: sticky;
          display: block;
          width: auto;
          overscroll-behavior: auto;
          opacity: 100%;
          & > .drawer-overlay {
            cursor: default;
            background-color: transparent;
          }
          & > *:not(.drawer-overlay) {
            translate: 0%;
            [dir="rtl"] & {
              translate: 0%;
            }
          }
        }
        &:checked ~ .drawer-side {
          pointer-events: auto;
          visibility: visible;
        }
      }
    }
  }
  .drawer-toggle {
    @layer daisyui.component {
      position: fixed;
      height: calc(0.25rem * 0);
      width: calc(0.25rem * 0);
      appearance: none;
      opacity: 0%;
      &:checked {
        & ~ .drawer-side {
          pointer-events: auto;
          visibility: visible;
          overflow-y: auto;
          opacity: 100%;
          scrollbar-color: currentColor oklch(0 0 0 / calc(var(--page-has-backdrop, 0) * 0.4));
          @supports (color: color-mix(in lab, red, red)) {
            & {
              scrollbar-color: color-mix(in oklch, currentColor 35%, #0000) oklch(0 0 0 / calc(var(--page-has-backdrop, 0) * 0.4));
            }
          }
          & > *:not(.drawer-overlay) {
            translate: 0%;
          }
        }
      }
      &:focus-visible ~ .drawer-content label.drawer-button {
        outline: 2px solid;
        outline-offset: 2px;
      }
    }
  }
  .menu {
    @layer daisyui.component {
      display: flex;
      width: fit-content;
      flex-direction: column;
      flex-wrap: wrap;
      padding: calc(0.25rem * 2);
      --menu-active-fg: var(--color-neutral-content);
      --menu-active-bg: var(--color-neutral);
      font-size: 0.875rem;
      :where(li ul) {
        position: relative;
        margin-inline-start: calc(0.25rem * 4);
        padding-inline-start: calc(0.25rem * 2);
        white-space: nowrap;
        &:before {
          position: absolute;
          inset-inline-start: calc(0.25rem * 0);
          top: calc(0.25rem * 3);
          bottom: calc(0.25rem * 3);
          background-color: var(--color-base-content);
          opacity: 10%;
          width: var(--border);
          content: "";
        }
      }
      :where(li > .menu-dropdown:not(.menu-dropdown-show)) {
        display: none;
      }
      :where(li:not(.menu-title) > *:not(ul, details, .menu-title, .btn)), :where(li:not(.menu-title) > details > summary:not(.menu-title)) {
        display: grid;
        grid-auto-flow: column;
        align-content: flex-start;
        align-items: center;
        gap: calc(0.25rem * 2);
        border-radius: var(--radius-field);
        padding-inline: calc(0.25rem * 3);
        padding-block: calc(0.25rem * 1.5);
        text-align: start;
        transition-property: color, background-color, box-shadow;
        transition-duration: 0.2s;
        transition-timing-function: cubic-bezier(0, 0, 0.2, 1);
        grid-auto-columns: minmax(auto, max-content) auto max-content;
        text-wrap: balance;
        user-select: none;
      }
      :where(li > details > summary) {
        --tw-outline-style: none;
        outline-style: none;
        @media (forced-colors: active) {
          outline: 2px solid transparent;
          outline-offset: 2px;
        }
        &::-webkit-details-marker {
          display: none;
        }
      }
      :where(li > details > summary), :where(li > .menu-dropdown-toggle) {
        &:after {
          justify-self: flex-end;
          display: block;
          height: 0.375rem;
          width: 0.375rem;
          rotate: -135deg;
          translate: 0 -1px;
          transition-property: rotate, translate;
          transition-duration: 0.2s;
          content: "";
          transform-origin: 50% 50%;
          box-shadow: 2px 2px inset;
          pointer-events: none;
        }
      }
      :where(li > details[open] > summary):after, :where(li > .menu-dropdown-toggle.menu-dropdown-show):after {
        rotate: 45deg;
        translate: 0 1px;
      }
      :where( li:not(.menu-title, .disabled) > *:not(ul, details, .menu-title), li:not(.menu-title, .disabled) > details > summary:not(.menu-title) ):not(.menu-active, :active, .btn) {
        &.menu-focus, &:focus-visible {
          cursor: pointer;
          background-color: var(--color-base-content);
          @supports (color: color-mix(in lab, red, red)) {
            & {
              background-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
            }
          }
          color: var(--color-base-content);
          --tw-outline-style: none;
          outline-style: none;
          @media (forced-colors: active) {
            outline: 2px solid transparent;
            outline-offset: 2px;
          }
        }
      }
      :where( li:not(.menu-title, .disabled) > *:not(ul, details, .menu-title):not(.menu-active, :active, .btn):hover, li:not(.menu-title, .disabled) > details > summary:not(.menu-title):not(.menu-active, :active, .btn):hover ) {
        cursor: pointer;
        background-color: var(--color-base-content);
        @supports (color: color-mix(in lab, red, red)) {
          & {
            background-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
          }
        }
        --tw-outline-style: none;
        outline-style: none;
        @media (forced-colors: active) {
          outline: 2px solid transparent;
          outline-offset: 2px;
        }
        box-shadow: 0 1px oklch(0% 0 0 / 0.01) inset, 0 -1px oklch(100% 0 0 / 0.01) inset;
      }
      :where(li:empty) {
        background-color: var(--color-base-content);
        opacity: 10%;
        margin: 0.5rem 1rem;
        height: 1px;
      }
      :where(li) {
        position: relative;
        display: flex;
        flex-shrink: 0;
        flex-direction: column;
        flex-wrap: wrap;
        align-items: stretch;
        .badge {
          justify-self: flex-end;
        }
        & > *:not(ul, .menu-title, details, .btn):active, & > *:not(ul, .menu-title, details, .btn).menu-active, & > details > summary:active {
          --tw-outline-style: none;
          outline-style: none;
          @media (forced-colors: active) {
            outline: 2px solid transparent;
            outline-offset: 2px;
          }
          color: var(--menu-active-fg);
          background-color: var(--menu-active-bg);
          background-size: auto, calc(var(--noise) * 100%);
          background-image: none, var(--fx-noise);
          &:not(&:active) {
            box-shadow: 0 2px calc(var(--depth) * 3px) -2px var(--menu-active-bg);
          }
        }
        &.menu-disabled {
          pointer-events: none;
          color: var(--color-base-content);
          @supports (color: color-mix(in lab, red, red)) {
            & {
              color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
            }
          }
        }
      }
      .dropdown:focus-within {
        .menu-dropdown-toggle:after {
          rotate: 45deg;
          translate: 0 1px;
        }
      }
      .dropdown-content {
        margin-top: calc(0.25rem * 2);
        padding: calc(0.25rem * 2);
        &:before {
          display: none;
        }
      }
    }
  }
  .dropdown {
    @layer daisyui.component {
      position: relative;
      display: inline-block;
      position-area: var(--anchor-v, bottom) var(--anchor-h, span-right);
      & > *:not(summary):focus {
        --tw-outline-style: none;
        outline-style: none;
        @media (forced-colors: active) {
          outline: 2px solid transparent;
          outline-offset: 2px;
        }
      }
      .dropdown-content {
        position: absolute;
      }
      &:not(details, .dropdown-open, .dropdown-hover:hover, :focus-within) .dropdown-content, &.dropdown-hover:not(:hover) [tabindex]:first-child:focus:not(:focus-visible) ~ .dropdown-content {
        display: none;
        transform-origin: top;
        opacity: 0%;
        scale: 95%;
      }
      &[popover], .dropdown-content {
        z-index: 999;
        @media (prefers-reduced-motion: no-preference) {
          animation: dropdown 0.2s;
          transition-property: opacity, scale, display;
          transition-behavior: allow-discrete;
          transition-duration: 0.2s;
          transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
        }
      }
      @starting-style {
        &[popover], .dropdown-content {
          scale: 95%;
          opacity: 0;
        }
      }
      &.dropdown-open, &:not(.dropdown-hover):focus, &:focus-within {
        > [tabindex]:first-child {
          pointer-events: none;
        }
        .dropdown-content {
          opacity: 100%;
        }
      }
      &.dropdown-hover:hover {
        .dropdown-content {
          opacity: 100%;
          scale: 100%;
        }
      }
      &:is(details) {
        summary {
          &::-webkit-details-marker {
            display: none;
          }
        }
      }
      &.dropdown-open, &:focus, &:focus-within {
        .dropdown-content {
          scale: 100%;
        }
      }
      &:where([popover]) {
        background: #0000;
      }
      &[popover] {
        position: fixed;
        color: inherit;
        @supports not (position-area: bottom) {
          margin: auto;
          &.dropdown-open:not(:popover-open) {
            display: none;
            transform-origin: top;
            opacity: 0%;
            scale: 95%;
          }
          &::backdrop {
            background-color: color-mix(in oklab, #000 30%, #0000);
          }
        }
        &:not(.dropdown-open, :popover-open) {
          display: none;
          transform-origin: top;
          opacity: 0%;
          scale: 95%;
        }
      }
    }
  }
  .btn {
    :where(&) {
      @layer daisyui.component {
        width: unset;
      }
    }
    .prose & {
      text-decoration-line: none;
    }
    @layer daisyui.component {
      display: inline-flex;
      flex-shrink: 0;
      cursor: pointer;
      flex-wrap: nowrap;
      align-items: center;
      justify-content: center;
      gap: calc(0.25rem * 1.5);
      text-align: center;
      vertical-align: middle;
      outline-offset: 2px;
      webkit-user-select: none;
      user-select: none;
      padding-inline: var(--btn-p);
      color: var(--btn-fg);
      --tw-prose-links: var(--btn-fg);
      height: var(--size);
      font-size: var(--fontsize, 0.875rem);
      font-weight: 600;
      outline-color: var(--btn-color, var(--color-base-content));
      transition-property: color, background-color, border-color, box-shadow;
      transition-timing-function: cubic-bezier(0, 0, 0.2, 1);
      transition-duration: 0.2s;
      border-start-start-radius: var(--join-ss, var(--radius-field));
      border-start-end-radius: var(--join-se, var(--radius-field));
      border-end-start-radius: var(--join-es, var(--radius-field));
      border-end-end-radius: var(--join-ee, var(--radius-field));
      background-color: var(--btn-bg);
      background-size: auto, calc(var(--noise) * 100%);
      background-image: none, var(--btn-noise);
      border-width: var(--border);
      border-style: solid;
      border-color: var(--btn-border);
      text-shadow: 0 0.5px oklch(100% 0 0 / calc(var(--depth) * 0.15));
      touch-action: manipulation;
      box-shadow: 0 0.5px 0 0.5px oklch(100% 0 0 / calc(var(--depth) * 6%)) inset, var(--btn-shadow);
      --size: calc(var(--size-field, 0.25rem) * 10);
      --btn-bg: var(--btn-color, var(--color-base-200));
      --btn-fg: var(--color-base-content);
      --btn-p: 1rem;
      --btn-border: var(--btn-bg);
      @supports (color: color-mix(in lab, red, red)) {
        & {
          --btn-border: color-mix(in oklab, var(--btn-bg), #000 calc(var(--depth) * 5%));
        }
      }
      --btn-shadow: 0 3px 2px -2px var(--btn-bg),
      0 4px 3px -2px var(--btn-bg);
      @supports (color: color-mix(in lab, red, red)) {
        & {
          --btn-shadow: 0 3px 2px -2px color-mix(in oklab, var(--btn-bg) calc(var(--depth) * 30%), #0000),
      0 4px 3px -2px color-mix(in oklab, var(--btn-bg) calc(var(--depth) * 30%), #0000);
        }
      }
      --btn-noise: var(--fx-noise);
      @media (hover: hover) {
        &:hover {
          --btn-bg: var(--btn-color, var(--color-base-200));
          @supports (color: color-mix(in lab, red, red)) {
            & {
              --btn-bg: color-mix(in oklab, var(--btn-color, var(--color-base-200)), #000 7%);
            }
          }
        }
      }
      &:focus-visible, &:has(:focus-visible) {
        outline-width: 2px;
        outline-style: solid;
        isolation: isolate;
      }
      &:active:not(.btn-active) {
        translate: 0 0.5px;
        --btn-bg: var(--btn-color, var(--color-base-200));
        @supports (color: color-mix(in lab, red, red)) {
          & {
            --btn-bg: color-mix(in oklab, var(--btn-color, var(--color-base-200)), #000 5%);
          }
        }
        --btn-border: var(--btn-color, var(--color-base-200));
        @supports (color: color-mix(in lab, red, red)) {
          & {
            --btn-border: color-mix(in oklab, var(--btn-color, var(--color-base-200)), #000 7%);
          }
        }
        --btn-shadow: 0 0 0 0 oklch(0% 0 0/0), 0 0 0 0 oklch(0% 0 0/0);
      }
      &:is(input[type="checkbox"], input[type="radio"]) {
        appearance: none;
        &::after {
          content: attr(aria-label);
        }
      }
      &:where(input:checked:not(.filter .btn)) {
        --btn-color: var(--color-primary);
        --btn-fg: var(--color-primary-content);
        isolation: isolate;
      }
    }
    &:disabled {
      @layer daisyui.modifier {
        &:not(.btn-link, .btn-ghost) {
          background-color: var(--color-base-content);
          @supports (color: color-mix(in lab, red, red)) {
            & {
              background-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
            }
          }
          box-shadow: none;
        }
        pointer-events: none;
        --btn-border: #0000;
        --btn-noise: none;
        --btn-fg: var(--color-base-content);
        @supports (color: color-mix(in lab, red, red)) {
          & {
            --btn-fg: color-mix(in oklch, var(--color-base-content) 20%, #0000);
          }
        }
        @media (hover: hover) {
          &:hover {
            pointer-events: none;
            background-color: var(--color-neutral);
            @supports (color: color-mix(in lab, red, red)) {
              & {
                background-color: color-mix(in oklab, var(--color-neutral) 20%, transparent);
              }
            }
            --btn-border: #0000;
            --btn-fg: var(--color-base-content);
            @supports (color: color-mix(in lab, red, red)) {
              & {
                --btn-fg: color-mix(in oklch, var(--color-base-content) 20%, #0000);
              }
            }
          }
        }
      }
    }
    &[disabled] {
      @layer daisyui.modifier {
        &:not(.btn-link, .btn-ghost) {
          background-color: var(--color-base-content);
          @supports (color: color-mix(in lab, red, red)) {
            & {
              background-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
            }
          }
          box-shadow: none;
        }
        pointer-events: none;
        --btn-border: #0000;
        --btn-noise: none;
        --btn-fg: var(--color-base-content);
        @supports (color: color-mix(in lab, red, red)) {
          & {
            --btn-fg: color-mix(in oklch, var(--color-base-content) 20%, #0000);
          }
        }
        @media (hover: hover) {
          &:hover {
            pointer-events: none;
            background-color: var(--color-neutral);
            @supports (color: color-mix(in lab, red, red)) {
              & {
                background-color: color-mix(in oklab, var(--color-neutral) 20%, transparent);
              }
            }
            --btn-border: #0000;
            --btn-fg: var(--color-base-content);
            @supports (color: color-mix(in lab, red, red)) {
              & {
                --btn-fg: color-mix(in oklch, var(--color-base-content) 20%, #0000);
              }
            }
          }
        }
      }
    }
  }
  .toast {
    @layer daisyui.component {
      position: fixed;
      inset-inline-start: auto;
      inset-inline-end: calc(0.25rem * 4);
      top: auto;
      bottom: calc(0.25rem * 4);
      display: flex;
      flex-direction: column;
      gap: calc(0.25rem * 2);
      background-color: transparent;
      translate: var(--toast-x, 0) var(--toast-y, 0);
      width: max-content;
      max-width: calc(100vw - 2rem);
      & > * {
        @media (prefers-reduced-motion: no-preference) {
          animation: toast 0.25s ease-out;
        }
      }
    }
  }
  .toggle {
    @layer daisyui.component {
      border: var(--border) solid currentColor;
      color: var(--input-color);
      position: relative;
      display: inline-grid;
      flex-shrink: 0;
      cursor: pointer;
      appearance: none;
      place-content: center;
      vertical-align: middle;
      webkit-user-select: none;
      user-select: none;
      grid-template-columns: 0fr 1fr 1fr;
      --radius-selector-max: calc(
      var(--radius-selector) + var(--radius-selector) + var(--radius-selector)
    );
      border-radius: calc( var(--radius-selector) + min(var(--toggle-p), var(--radius-selector-max)) + min(var(--border), var(--radius-selector-max)) );
      padding: var(--toggle-p);
      box-shadow: 0 1px currentColor inset;
      @supports (color: color-mix(in lab, red, red)) {
        & {
          box-shadow: 0 1px color-mix(in oklab, currentColor calc(var(--depth) * 10%), #0000) inset;
        }
      }
      transition: color 0.3s, grid-template-columns 0.2s;
      --input-color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        & {
          --input-color: color-mix(in oklab, var(--color-base-content) 50%, #0000);
        }
      }
      --toggle-p: calc(var(--size) * 0.125);
      --size: calc(var(--size-selector, 0.25rem) * 6);
      width: calc((var(--size) * 2) - (var(--border) + var(--toggle-p)) * 2);
      height: var(--size);
      > * {
        z-index: 1;
        grid-column: span 1 / span 1;
        grid-column-start: 2;
        grid-row-start: 1;
        height: 100%;
        cursor: pointer;
        appearance: none;
        background-color: transparent;
        padding: calc(0.25rem * 0.5);
        transition: opacity 0.2s, rotate 0.4s;
        border: none;
        &:focus {
          --tw-outline-style: none;
          outline-style: none;
          @media (forced-colors: active) {
            outline: 2px solid transparent;
            outline-offset: 2px;
          }
        }
        &:nth-child(2) {
          color: var(--color-base-100);
          rotate: 0deg;
        }
        &:nth-child(3) {
          color: var(--color-base-100);
          opacity: 0%;
          rotate: -15deg;
        }
      }
      &:has(:checked) {
        > :nth-child(2) {
          opacity: 0%;
          rotate: 15deg;
        }
        > :nth-child(3) {
          opacity: 100%;
          rotate: 0deg;
        }
      }
      &:before {
        position: relative;
        inset-inline-start: calc(0.25rem * 0);
        grid-column-start: 2;
        grid-row-start: 1;
        aspect-ratio: 1 / 1;
        height: 100%;
        border-radius: var(--radius-selector);
        background-color: currentcolor;
        translate: 0;
        --tw-content: "";
        content: var(--tw-content);
        transition: background-color 0.1s, translate 0.2s, inset-inline-start 0.2s;
        box-shadow: 0 -1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px currentColor;
        @supports (color: color-mix(in lab, red, red)) {
          & {
            box-shadow: 0 -1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px color-mix(in oklab, currentColor calc(var(--depth) * 10%), #0000);
          }
        }
        background-size: auto, calc(var(--noise) * 100%);
        background-image: none, var(--fx-noise);
      }
      @media (forced-colors: active) {
        &:before {
          outline-style: var(--tw-outline-style);
          outline-width: 1px;
          outline-offset: calc(1px * -1);
        }
      }
      @media print {
        &:before {
          outline: 0.25rem solid;
          outline-offset: -1rem;
        }
      }
      &:focus-visible, &:has(:focus-visible) {
        outline: 2px solid currentColor;
        outline-offset: 2px;
      }
      &:checked, &[aria-checked="true"], &:has(> input:checked) {
        grid-template-columns: 1fr 1fr 0fr;
        background-color: var(--color-base-100);
        --input-color: var(--color-base-content);
        &:before {
          background-color: currentcolor;
        }
        @starting-style {
          &:before {
            opacity: 0;
          }
        }
      }
      &:indeterminate {
        grid-template-columns: 0.5fr 1fr 0.5fr;
      }
      &:disabled {
        cursor: not-allowed;
        opacity: 30%;
        &:before {
          background-color: transparent;
          border: var(--border) solid currentColor;
        }
      }
    }
  }
  .input {
    @layer daisyui.component {
      cursor: text;
      border: var(--border) solid #0000;
      position: relative;
      display: inline-flex;
      flex-shrink: 1;
      appearance: none;
      align-items: center;
      gap: calc(0.25rem * 2);
      background-color: var(--color-base-100);
      padding-inline: calc(0.25rem * 3);
      vertical-align: middle;
      white-space: nowrap;
      width: clamp(3rem, 20rem, 100%);
      height: var(--size);
      font-size: max(var(--font-size, 0.875rem), 0.875rem);
      touch-action: manipulation;
      border-start-start-radius: var(--join-ss, var(--radius-field));
      border-start-end-radius: var(--join-se, var(--radius-field));
      border-end-start-radius: var(--join-es, var(--radius-field));
      border-end-end-radius: var(--join-ee, var(--radius-field));
      border-color: var(--input-color);
      box-shadow: 0 1px var(--input-color) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
      @supports (color: color-mix(in lab, red, red)) {
        & {
          box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
        }
      }
      --size: calc(var(--size-field, 0.25rem) * 10);
      --input-color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        & {
          --input-color: color-mix(in oklab, var(--color-base-content) 20%, #0000);
        }
      }
      &:where(input) {
        display: inline-flex;
      }
      :where(input) {
        display: inline-flex;
        height: 100%;
        width: 100%;
        appearance: none;
        background-color: transparent;
        border: none;
        &:focus, &:focus-within {
          --tw-outline-style: none;
          outline-style: none;
          @media (forced-colors: active) {
            outline: 2px solid transparent;
            outline-offset: 2px;
          }
        }
      }
      :where(input[type="url"]), :where(input[type="email"]) {
        direction: ltr;
      }
      :where(input[type="date"]) {
        display: inline-flex;
      }
      &:focus, &:focus-within {
        --input-color: var(--color-base-content);
        box-shadow: 0 1px var(--input-color);
        @supports (color: color-mix(in lab, red, red)) {
          & {
            box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000);
          }
        }
        outline: 2px solid var(--input-color);
        outline-offset: 2px;
        isolation: isolate;
        z-index: 1;
      }
      @media (pointer: coarse) {
        @supports (-webkit-touch-callout: none) {
          &:focus, &:focus-within {
            --font-size: 1rem;
          }
        }
      }
      &:has(> input[disabled]), &:is(:disabled, [disabled]), fieldset:disabled & {
        cursor: not-allowed;
        border-color: var(--color-base-200);
        background-color: var(--color-base-200);
        color: var(--color-base-content);
        @supports (color: color-mix(in lab, red, red)) {
          & {
            color: color-mix(in oklab, var(--color-base-content) 40%, transparent);
          }
        }
        &::placeholder {
          color: var(--color-base-content);
          @supports (color: color-mix(in lab, red, red)) {
            & {
              color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
            }
          }
        }
        box-shadow: none;
      }
      &:has(> input[disabled]) > input[disabled] {
        cursor: not-allowed;
      }
      &::-webkit-date-and-time-value {
        text-align: inherit;
      }
      &[type="number"] {
        &::-webkit-inner-spin-button {
          margin-block: calc(0.25rem * -3);
          margin-inline-end: calc(0.25rem * -3);
        }
      }
      &::-webkit-calendar-picker-indicator {
        position: absolute;
        inset-inline-end: 0.75em;
      }
      &:has(> input[type="date"]) {
        :where(input[type="date"]) {
          display: inline-flex;
          webkit-appearance: none;
          appearance: none;
        }
        input[type="date"]::-webkit-calendar-picker-indicator {
          position: absolute;
          inset-inline-end: 0.75em;
          width: 1em;
          height: 1em;
          cursor: pointer;
        }
      }
    }
  }
  .indicator {
    @layer daisyui.component {
      position: relative;
      display: inline-flex;
      width: max-content;
      :where(.indicator-item) {
        z-index: 1;
        position: absolute;
        white-space: nowrap;
        top: var(--indicator-t, 0);
        bottom: var(--indicator-b, auto);
        left: var(--indicator-s, auto);
        right: var(--indicator-e, 0);
        translate: var(--indicator-x, 50%) var(--indicator-y, -50%);
      }
    }
  }
  .table {
    @layer daisyui.component {
      font-size: 0.875rem;
      position: relative;
      width: 100%;
      border-radius: var(--radius-box);
      text-align: left;
      &:where(:dir(rtl), [dir="rtl"], [dir="rtl"] *) {
        text-align: right;
      }
      tr.row-hover {
        &, &:nth-child(even) {
          &:hover {
            @media (hover: hover) {
              background-color: var(--color-base-200);
            }
          }
        }
      }
      :where(th, td) {
        padding-inline: calc(0.25rem * 4);
        padding-block: calc(0.25rem * 3);
        vertical-align: middle;
      }
      :where(thead, tfoot) {
        white-space: nowrap;
        color: var(--color-base-content);
        @supports (color: color-mix(in lab, red, red)) {
          & {
            color: color-mix(in oklab, var(--color-base-content) 60%, transparent);
          }
        }
        font-size: 0.875rem;
        font-weight: 600;
      }
      :where(tfoot) {
        border-top: var(--border) solid var(--color-base-content);
        @supports (color: color-mix(in lab, red, red)) {
          & {
            border-top: var(--border) solid color-mix(in oklch, var(--color-base-content) 5%, #0000);
          }
        }
      }
      :where(.table-pin-rows thead tr) {
        position: sticky;
        top: calc(0.25rem * 0);
        z-index: 1;
        background-color: var(--color-base-100);
      }
      :where(.table-pin-rows tfoot tr) {
        position: sticky;
        bottom: calc(0.25rem * 0);
        z-index: 1;
        background-color: var(--color-base-100);
      }
      :where(.table-pin-cols tr th) {
        position: sticky;
        right: calc(0.25rem * 0);
        left: calc(0.25rem * 0);
        background-color: var(--color-base-100);
      }
      :where(thead tr, tbody tr:not(:last-child)) {
        border-bottom: var(--border) solid var(--color-base-content);
        @supports (color: color-mix(in lab, red, red)) {
          & {
            border-bottom: var(--border) solid color-mix(in oklch, var(--color-base-content) 5%, #0000);
          }
        }
      }
    }
  }
  .checkbox {
    @layer daisyui.component {
      border: var(--border) solid var(--input-color, var(--color-base-content));
      @supports (color: color-mix(in lab, red, red)) {
        & {
          border: var(--border) solid var(--input-color, color-mix(in oklab, var(--color-base-content) 20%, #0000));
        }
      }
      position: relative;
      display: inline-block;
      flex-shrink: 0;
      cursor: pointer;
      appearance: none;
      border-radius: var(--radius-selector);
      padding: calc(0.25rem * 1);
      vertical-align: middle;
      color: var(--color-base-content);
      box-shadow: 0 1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 0 #0000 inset, 0 0 #0000;
      transition: background-color 0.2s, box-shadow 0.2s;
      --size: calc(var(--size-selector, 0.25rem) * 6);
      width: var(--size);
      height: var(--size);
      background-size: auto, calc(var(--noise) * 100%);
      background-image: none, var(--fx-noise);
      &:before {
        --tw-content: "";
        content: var(--tw-content);
        display: block;
        width: 100%;
        height: 100%;
        rotate: 45deg;
        background-color: currentcolor;
        opacity: 0%;
        transition: clip-path 0.3s, opacity 0.1s, rotate 0.3s, translate 0.3s;
        transition-delay: 0.1s;
        clip-path: polygon(20% 100%, 20% 80%, 50% 80%, 50% 80%, 70% 80%, 70% 100%);
        box-shadow: 0px 3px 0 0px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
        font-size: 1rem;
        line-height: 0.75;
      }
      &:focus-visible {
        outline: 2px solid var(--input-color, currentColor);
        outline-offset: 2px;
      }
      &:checked, &[aria-checked="true"] {
        background-color: var(--input-color, #0000);
        box-shadow: 0 0 #0000 inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px oklch(0% 0 0 / calc(var(--depth) * 0.1));
        &:before {
          clip-path: polygon(20% 100%, 20% 80%, 50% 80%, 50% 0%, 70% 0%, 70% 100%);
          opacity: 100%;
        }
        @media (forced-colors: active) {
          &:before {
            rotate: 0deg;
            background-color: transparent;
            --tw-content: "✔︎";
            clip-path: none;
          }
        }
        @media print {
          &:before {
            rotate: 0deg;
            background-color: transparent;
            --tw-content: "✔︎";
            clip-path: none;
          }
        }
      }
      &:indeterminate {
        background-color: var( --input-color, var(--color-base-content) );
        @supports (color: color-mix(in lab, red, red)) {
          & {
            background-color: var( --input-color, color-mix(in oklab, var(--color-base-content) 20%, #0000) );
          }
        }
        &:before {
          rotate: 0deg;
          opacity: 100%;
          translate: 0 -35%;
          clip-path: polygon(20% 100%, 20% 80%, 50% 80%, 50% 80%, 80% 80%, 80% 100%);
        }
      }
    }
    &:disabled {
      @layer daisyui.modifier {
        cursor: not-allowed;
        opacity: 20%;
      }
    }
  }
  .radio {
    @layer daisyui.component {
      position: relative;
      display: inline-block;
      flex-shrink: 0;
      cursor: pointer;
      appearance: none;
      border-radius: calc(infinity * 1px);
      padding: calc(0.25rem * 1);
      vertical-align: middle;
      border: var(--border) solid var(--input-color, currentColor);
      @supports (color: color-mix(in lab, red, red)) {
        & {
          border: var(--border) solid var(--input-color, color-mix(in srgb, currentColor 20%, #0000));
        }
      }
      box-shadow: 0 1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset;
      --size: calc(var(--size-selector, 0.25rem) * 6);
      width: var(--size);
      height: var(--size);
      color: var(--input-color, currentColor);
      &:before {
        display: block;
        width: 100%;
        height: 100%;
        border-radius: calc(infinity * 1px);
        --tw-content: "";
        content: var(--tw-content);
        background-size: auto, calc(var(--noise) * 100%);
        background-image: none, var(--fx-noise);
      }
      &:focus-visible {
        outline: 2px solid currentColor;
      }
      &:checked, &[aria-checked="true"] {
        border-color: currentcolor;
        background-color: var(--color-base-100);
        @media (prefers-reduced-motion: no-preference) {
          animation: radio 0.2s ease-out;
        }
        &:before {
          background-color: currentcolor;
          box-shadow: 0 -1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px oklch(0% 0 0 / calc(var(--depth) * 0.1));
        }
        @media (forced-colors: active) {
          &:before {
            outline-style: var(--tw-outline-style);
            outline-width: 1px;
            outline-offset: calc(1px * -1);
          }
        }
        @media print {
          &:before {
            outline: 0.25rem solid;
            outline-offset: -1rem;
          }
        }
      }
    }
    &:disabled {
      @layer daisyui.modifier {
        cursor: not-allowed;
        opacity: 20%;
      }
    }
  }
  .rating {
    @layer daisyui.component {
      position: relative;
      display: inline-flex;
      vertical-align: middle;
      & input {
        border: none;
        appearance: none;
      }
      :where(*) {
        height: calc(0.25rem * 6);
        width: calc(0.25rem * 6);
        border-radius: 0;
        background-color: var(--color-base-content);
        opacity: 20%;
        @media (prefers-reduced-motion: no-preference) {
          animation: rating 0.25s ease-out;
        }
        &:is(input) {
          cursor: pointer;
        }
      }
      & .rating-hidden {
        width: calc(0.25rem * 2);
        background-color: transparent;
      }
      input[type="radio"]:checked {
        background-image: none;
      }
      * {
        &:checked, &[aria-checked="true"], &[aria-current="true"], &:has(~ *:checked, ~ *[aria-checked="true"], ~ *[aria-current="true"]) {
          opacity: 100%;
        }
        &:focus-visible {
          scale: 1.1;
          @media (prefers-reduced-motion: no-preference) {
            transition: scale 0.2s ease-out;
          }
        }
      }
      & *:active:focus {
        animation: none;
        scale: 1.1;
      }
    }
    @layer daisyui.modifier {
      &.rating-xs :where(*:not(.rating-hidden)) {
        width: calc(0.25rem * 4);
        height: calc(0.25rem * 4);
      }
      &.rating-sm :where(*:not(.rating-hidden)) {
        width: calc(0.25rem * 5);
        height: calc(0.25rem * 5);
      }
      &.rating-md :where(*:not(.rating-hidden)) {
        width: calc(0.25rem * 6);
        height: calc(0.25rem * 6);
      }
      &.rating-lg :where(*:not(.rating-hidden)) {
        width: calc(0.25rem * 7);
        height: calc(0.25rem * 7);
      }
      &.rating-xl :where(*:not(.rating-hidden)) {
        width: calc(0.25rem * 8);
        height: calc(0.25rem * 8);
      }
    }
  }
  .navbar {
    @layer daisyui.component {
      display: flex;
      width: 100%;
      align-items: center;
      padding: 0.5rem;
      min-height: 4rem;
    }
    :where(&) {
      @layer daisyui.modifier {
        position: relative;
      }
    }
  }
  .card {
    @layer daisyui.component {
      position: relative;
      display: flex;
      flex-direction: column;
      border-radius: var(--radius-box);
      outline-width: 2px;
      transition: outline 0.2s ease-in-out;
      outline: 0 solid #0000;
      outline-offset: 2px;
      &:focus {
        --tw-outline-style: none;
        outline-style: none;
        @media (forced-colors: active) {
          outline: 2px solid transparent;
          outline-offset: 2px;
        }
      }
      &:focus-visible {
        outline-color: currentColor;
      }
      :where(figure:first-child) {
        overflow: hidden;
        border-start-start-radius: inherit;
        border-start-end-radius: inherit;
        border-end-start-radius: unset;
        border-end-end-radius: unset;
      }
      :where(figure:last-child) {
        overflow: hidden;
        border-start-start-radius: unset;
        border-start-end-radius: unset;
        border-end-start-radius: inherit;
        border-end-end-radius: inherit;
      }
      figure {
        display: flex;
        align-items: center;
        justify-content: center;
      }
      &:has(> input:is(input[type="checkbox"], input[type="radio"])) {
        cursor: pointer;
        user-select: none;
      }
      &:has(> :checked) {
        outline: 2px solid currentColor;
      }
    }
  }
  .progress {
    @layer daisyui.component {
      position: relative;
      height: calc(0.25rem * 2);
      width: 100%;
      appearance: none;
      overflow: hidden;
      border-radius: var(--radius-box);
      background-color: currentcolor;
      @supports (color: color-mix(in lab, red, red)) {
        & {
          background-color: color-mix(in oklab, currentcolor 20%, transparent);
        }
      }
      color: var(--color-base-content);
      &:indeterminate {
        background-image: repeating-linear-gradient( 90deg, currentColor -1%, currentColor 10%, #0000 10%, #0000 90% );
        background-size: 200%;
        background-position-x: 15%;
        @media (prefers-reduced-motion: no-preference) {
          animation: progress 5s ease-in-out infinite;
        }
        @supports (-moz-appearance: none) {
          &::-moz-progress-bar {
            background-color: transparent;
            @media (prefers-reduced-motion: no-preference) {
              animation: progress 5s ease-in-out infinite;
              background-image: repeating-linear-gradient( 90deg, currentColor -1%, currentColor 10%, #0000 10%, #0000 90% );
              background-size: 200%;
              background-position-x: 15%;
            }
          }
        }
      }
      @supports (-moz-appearance: none) {
        &::-moz-progress-bar {
          border-radius: var(--radius-box);
          background-color: currentcolor;
        }
      }
      @supports (-webkit-appearance: none) {
        &::-webkit-progress-bar {
          border-radius: var(--radius-box);
          background-color: transparent;
        }
        &::-webkit-progress-value {
          border-radius: var(--radius-box);
          background-color: currentColor;
        }
      }
    }
  }
  .absolute {
    position: absolute;
  }
  .fixed {
    position: fixed;
  }
  .relative {
    position: relative;
  }
  .sticky {
    position: sticky;
  }
  .top-0 {
    top: calc(var(--spacing) * 0);
  }
  .top-1 {
    top: calc(var(--spacing) * 1);
  }
  .top-1\/2 {
    top: calc(1/2 * 100%);
  }
  .right-0 {
    right: calc(var(--spacing) * 0);
  }
  .right-2 {
    right: calc(var(--spacing) * 2);
  }
  .right-5 {
    right: calc(var(--spacing) * 5);
  }
  .left-0 {
    left: calc(var(--spacing) * 0);
  }
  .left-2 {
    left: calc(var(--spacing) * 2);
  }
  .left-5 {
    left: calc(var(--spacing) * 5);
  }
  .textarea {
    @layer daisyui.component {
      border: var(--border) solid #0000;
      min-height: calc(0.25rem * 20);
      flex-shrink: 1;
      appearance: none;
      border-radius: var(--radius-field);
      background-color: var(--color-base-100);
      padding-block: calc(0.25rem * 2);
      vertical-align: middle;
      width: clamp(3rem, 20rem, 100%);
      padding-inline-start: 0.75rem;
      padding-inline-end: 0.75rem;
      font-size: max(var(--font-size, 0.875rem), 0.875rem);
      touch-action: manipulation;
      border-color: var(--input-color);
      box-shadow: 0 1px var(--input-color) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
      @supports (color: color-mix(in lab, red, red)) {
        & {
          box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
        }
      }
      --input-color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        & {
          --input-color: color-mix(in oklab, var(--color-base-content) 20%, #0000);
        }
      }
      textarea {
        appearance: none;
        background-color: transparent;
        border: none;
        &:focus, &:focus-within {
          --tw-outline-style: none;
          outline-style: none;
          @media (forced-colors: active) {
            outline: 2px solid transparent;
            outline-offset: 2px;
          }
        }
      }
      &:focus, &:focus-within {
        --input-color: var(--color-base-content);
        box-shadow: 0 1px var(--input-color);
        @supports (color: color-mix(in lab, red, red)) {
          & {
            box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000);
          }
        }
        outline: 2px solid var(--input-color);
        outline-offset: 2px;
        isolation: isolate;
      }
      @media (pointer: coarse) {
        @supports (-webkit-touch-callout: none) {
          &:focus, &:focus-within {
            --font-size: 1rem;
          }
        }
      }
      &:has(> textarea[disabled]), &:is(:disabled, [disabled]) {
        cursor: not-allowed;
        border-color: var(--color-base-200);
        background-color: var(--color-base-200);
        color: var(--color-base-content);
        @supports (color: color-mix(in lab, red, red)) {
          & {
            color: color-mix(in oklab, var(--color-base-content) 40%, transparent);
          }
        }
        &::placeholder {
          color: var(--color-base-content);
          @supports (color: color-mix(in lab, red, red)) {
            & {
              color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
            }
          }
        }
        box-shadow: none;
      }
      &:has(> textarea[disabled]) > textarea[disabled] {
        cursor: not-allowed;
      }
    }
  }
  .z-1 {
    z-index: 1;
  }
  .z-2 {
    z-index: 2;
  }
  .z-3 {
    z-index: 3;
  }
  .z-10 {
    z-index: 10;
  }
  .z-50 {
    z-index: 50;
  }
  .col-\[1\/2\] {
    grid-column: 1/2;
  }
  .col-\[1\/3\] {
    grid-column: 1/3;
  }
  .col-\[2\/3\] {
    grid-column: 2/3;
  }
  .col-auto {
    grid-column: auto;
  }
  .drawer-content {
    @layer daisyui.component {
      grid-column-start: 2;
      grid-row-start: 1;
      min-width: calc(0.25rem * 0);
    }
  }
  .m-1 {
    margin: calc(var(--spacing) * 1);
  }
  .filter {
    @layer daisyui.component {
      display: flex;
      flex-wrap: wrap;
      input[type="radio"] {
        width: auto;
      }
      input {
        overflow: hidden;
        opacity: 100%;
        scale: 1;
        transition: margin 0.1s, opacity 0.3s, padding 0.3s, border-width 0.1s;
        &:not(:last-child) {
          margin-inline-end: calc(0.25rem * 1);
        }
        &.filter-reset {
          aspect-ratio: 1 / 1;
          &::after {
            content: "×";
          }
        }
      }
      &:not(:has(input:checked:not(.filter-reset))) {
        .filter-reset, input[type="reset"] {
          scale: 0;
          border-width: 0;
          margin-inline: calc(0.25rem * 0);
          width: calc(0.25rem * 0);
          padding-inline: calc(0.25rem * 0);
          opacity: 0%;
        }
      }
      &:has(input:checked:not(.filter-reset)) {
        input:not(:checked, .filter-reset, input[type="reset"]) {
          scale: 0;
          border-width: 0;
          margin-inline: calc(0.25rem * 0);
          width: calc(0.25rem * 0);
          padding-inline: calc(0.25rem * 0);
          opacity: 0%;
        }
      }
    }
  }
  .mx-auto {
    margin-inline: auto;
  }
  .my-1 {
    margin-block: calc(var(--spacing) * 1);
  }
  .my-2 {
    margin-block: calc(var(--spacing) * 2);
  }
  .mt-1 {
    margin-top: calc(var(--spacing) * 1);
  }
  .mt-3 {
    margin-top: calc(var(--spacing) * 3);
  }
  .mt-5 {
    margin-top: calc(var(--spacing) * 5);
  }
  .mt-10 {
    margin-top: calc(var(--spacing) * 10);
  }
  .mt-20 {
    margin-top: calc(var(--spacing) * 20);
  }
  .mt-\[2px\] {
    margin-top: 2px;
  }
  .mr-5 {
    margin-right: calc(var(--spacing) * 5);
  }
  .mr-\[10px\] {
    margin-right: 10px;
  }
  .mr-\[120px\] {
    margin-right: 120px;
  }
  .mb-5 {
    margin-bottom: calc(var(--spacing) * 5);
  }
  .mb-10 {
    margin-bottom: calc(var(--spacing) * 10);
  }
  .ml-1 {
    margin-left: calc(var(--spacing) * 1);
  }
  .ml-2 {
    margin-left: calc(var(--spacing) * 2);
  }
  .ml-5 {
    margin-left: calc(var(--spacing) * 5);
  }
  .ml-\[2px\] {
    margin-left: 2px;
  }
  .ml-\[5px\] {
    margin-left: 5px;
  }
  .ml-\[6px\] {
    margin-left: 6px;
  }
  .ml-\[8px\] {
    margin-left: 8px;
  }
  .ml-\[10px\] {
    margin-left: 10px;
  }
  .carousel-item {
    @layer daisyui.component {
      box-sizing: content-box;
      display: flex;
      flex: none;
      scroll-snap-align: start;
    }
  }
  .badge {
    @layer daisyui.component {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      gap: calc(0.25rem * 2);
      border-radius: var(--radius-selector);
      vertical-align: middle;
      color: var(--badge-fg);
      border: var(--border) solid var(--badge-color, var(--color-base-200));
      font-size: 0.875rem;
      width: fit-content;
      padding-inline: calc(0.25rem * 3 - var(--border));
      background-size: auto, calc(var(--noise) * 100%);
      background-image: none, var(--fx-noise);
      background-color: var(--badge-bg);
      --badge-bg: var(--badge-color, var(--color-base-100));
      --badge-fg: var(--color-base-content);
      --size: calc(var(--size-selector, 0.25rem) * 6);
      height: var(--size);
    }
  }
  .footer {
    @layer daisyui.component {
      display: grid;
      width: 100%;
      grid-auto-flow: row;
      place-items: start;
      column-gap: calc(0.25rem * 4);
      row-gap: calc(0.25rem * 10);
      font-size: 0.875rem;
      line-height: 1.25rem;
      & > * {
        display: grid;
        place-items: start;
        gap: calc(0.25rem * 2);
      }
      &.footer-center {
        grid-auto-flow: column dense;
        place-items: center;
        text-align: center;
        & > * {
          place-items: center;
        }
      }
    }
  }
  .navbar-end {
    @layer daisyui.component {
      display: inline-flex;
      align-items: center;
      width: 50%;
      justify-content: flex-end;
    }
  }
  .navbar-start {
    @layer daisyui.component {
      display: inline-flex;
      align-items: center;
      width: 50%;
      justify-content: flex-start;
    }
  }
  .navbar-center {
    @layer daisyui.component {
      display: inline-flex;
      align-items: center;
      flex-shrink: 0;
    }
  }
  .carousel {
    @layer daisyui.component {
      display: inline-flex;
      overflow-x: scroll;
      scroll-snap-type: x mandatory;
      scrollbar-width: none;
      @media (prefers-reduced-motion: no-preference) {
        scroll-behavior: smooth;
      }
      &::-webkit-scrollbar {
        display: none;
      }
    }
  }
  .prose {
    :root & {
      --tw-prose-body: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        & {
          --tw-prose-body: color-mix(in oklab, var(--color-base-content) 80%, #0000);
        }
      }
      --tw-prose-headings: var(--color-base-content);
      --tw-prose-lead: var(--color-base-content);
      --tw-prose-links: var(--color-base-content);
      --tw-prose-bold: var(--color-base-content);
      --tw-prose-counters: var(--color-base-content);
      --tw-prose-bullets: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        & {
          --tw-prose-bullets: color-mix(in oklab, var(--color-base-content) 50%, #0000);
        }
      }
      --tw-prose-hr: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        & {
          --tw-prose-hr: color-mix(in oklab, var(--color-base-content) 20%, #0000);
        }
      }
      --tw-prose-quotes: var(--color-base-content);
      --tw-prose-quote-borders: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        & {
          --tw-prose-quote-borders: color-mix(in oklab, var(--color-base-content) 20%, #0000);
        }
      }
      --tw-prose-captions: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        & {
          --tw-prose-captions: color-mix(in oklab, var(--color-base-content) 50%, #0000);
        }
      }
      --tw-prose-code: var(--color-base-content);
      --tw-prose-pre-code: var(--color-neutral-content);
      --tw-prose-pre-bg: var(--color-neutral);
      --tw-prose-th-borders: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        & {
          --tw-prose-th-borders: color-mix(in oklab, var(--color-base-content) 50%, #0000);
        }
      }
      --tw-prose-td-borders: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        & {
          --tw-prose-td-borders: color-mix(in oklab, var(--color-base-content) 20%, #0000);
        }
      }
      --tw-prose-kbd: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        & {
          --tw-prose-kbd: color-mix(in oklab, var(--color-base-content) 80%, #0000);
        }
      }
      :where(code):not(pre > code) {
        background-color: var(--color-base-200);
        border-radius: var(--radius-selector);
        border: var(--border) solid var(--color-base-300);
        padding-inline: 0.5em;
        font-weight: inherit;
        &:before, &:after {
          display: none;
        }
      }
    }
  }
  .flex {
    display: flex;
  }
  .grid {
    display: grid;
  }
  .hidden {
    display: none;
  }
  .inline-block {
    display: inline-block;
  }
  .table {
    display: table;
  }
  .btn-circle {
    @layer daisyui.modifier {
      border-radius: calc(infinity * 1px);
      padding-inline: calc(0.25rem * 0);
      width: var(--size);
      height: var(--size);
    }
  }
  .h-5 {
    height: calc(var(--spacing) * 5);
  }
  .h-20 {
    height: calc(var(--spacing) * 20);
  }
  .h-24 {
    height: calc(var(--spacing) * 24);
  }
  .h-30 {
    height: calc(var(--spacing) * 30);
  }
  .h-50 {
    height: calc(var(--spacing) * 50);
  }
  .h-60 {
    height: calc(var(--spacing) * 60);
  }
  .h-100 {
    height: calc(var(--spacing) * 100);
  }
  .h-500 {
    height: calc(var(--spacing) * 500);
  }
  .h-\[1em\] {
    height: 1em;
  }
  .h-\[3\%\] {
    height: 3%;
  }
  .h-\[3\] {
    height: 3;
  }
  .h-\[10\%\] {
    height: 10%;
  }
  .h-\[10px\] {
    height: 10px;
  }
  .h-\[11\%\] {
    height: 11%;
  }
  .h-\[12\%\] {
    height: 12%;
  }
  .h-\[20px\] {
    height: 20px;
  }
  .h-\[30\%\] {
    height: 30%;
  }
  .h-\[30px\] {
    height: 30px;
  }
  .h-\[33\%\] {
    height: 33%;
  }
  .h-\[35\%\] {
    height: 35%;
  }
  .h-\[35\.5\%\] {
    height: 35.5%;
  }
  .h-\[36\%\] {
    height: 36%;
  }
  .h-\[50px\] {
    height: 50px;
  }
  .h-\[70px\] {
    height: 70px;
  }
  .h-\[100\%\] {
    height: 100%;
  }
  .h-\[100px\] {
    height: 100px;
  }
  .h-\[300px\] {
    height: 300px;
  }
  .h-\[380px\] {
    height: 380px;
  }
  .h-\[400px\] {
    height: 400px;
  }
  .h-\[500\] {
    height: 500;
  }
  .h-\[500px\] {
    height: 500px;
  }
  .h-\[auto\] {
    height: auto;
  }
  .h-auto {
    height: auto;
  }
  .max-h-300 {
    max-height: calc(var(--spacing) * 300);
  }
  .max-h-\[300px\] {
    max-height: 300px;
  }
  .max-h-\[500px\] {
    max-height: 500px;
  }
  .min-h-\[90px\] {
    min-height: 90px;
  }
  .w-0 {
    width: calc(var(--spacing) * 0);
  }
  .w-5 {
    width: calc(var(--spacing) * 5);
  }
  .w-10 {
    width: calc(var(--spacing) * 10);
  }
  .w-24 {
    width: calc(var(--spacing) * 24);
  }
  .w-32 {
    width: calc(var(--spacing) * 32);
  }
  .w-52 {
    width: calc(var(--spacing) * 52);
  }
  .w-64 {
    width: calc(var(--spacing) * 64);
  }
  .w-\[5\] {
    width: 5;
  }
  .w-\[10px\] {
    width: 10px;
  }
  .w-\[20px\] {
    width: 20px;
  }
  .w-\[25\%\] {
    width: 25%;
  }
  .w-\[25\] {
    width: 25;
  }
  .w-\[30px\] {
    width: 30px;
  }
  .w-\[35\%\] {
    width: 35%;
  }
  .w-\[40px\] {
    width: 40px;
  }
  .w-\[50\%\] {
    width: 50%;
  }
  .w-\[50px\] {
    width: 50px;
  }
  .w-\[70px\] {
    width: 70px;
  }
  .w-\[75\%\] {
    width: 75%;
  }
  .w-\[75\] {
    width: 75;
  }
  .w-\[95px\] {
    width: 95px;
  }
  .w-\[100\%\] {
    width: 100%;
  }
  .w-\[100\] {
    width: 100;
  }
  .w-\[100px\] {
    width: 100px;
  }
  .w-\[200px\] {
    width: 200px;
  }
  .w-auto {
    width: auto;
  }
  .w-full {
    width: 100%;
  }
  .max-w-100 {
    max-width: calc(var(--spacing) * 100);
  }
  .max-w-\[50\%\] {
    max-width: 50%;
  }
  .max-w-\[50\] {
    max-width: 50;
  }
  .max-w-\[70px\] {
    max-width: 70px;
  }
  .max-w-\[72px\] {
    max-width: 72px;
  }
  .max-w-\[100\%\] {
    max-width: 100%;
  }
  .max-w-\[100px\] {
    max-width: 100px;
  }
  .max-w-\[500px\] {
    max-width: 500px;
  }
  .max-w-\[550px\] {
    max-width: 550px;
  }
  .max-w-\[600px\] {
    max-width: 600px;
  }
  .max-w-\[700px\] {
    max-width: 700px;
  }
  .max-w-\[720px\] {
    max-width: 720px;
  }
  .max-w-\[725px\] {
    max-width: 725px;
  }
  .max-w-\[730px\] {
    max-width: 730px;
  }
  .max-w-\[760px\] {
    max-width: 760px;
  }
  .max-w-\[1300\] {
    max-width: 1300;
  }
  .max-w-\[1300px\] {
    max-width: 1300px;
  }
  .flex-shrink {
    flex-shrink: 1;
  }
  .border-collapse {
    border-collapse: collapse;
  }
  .-translate-y-1 {
    --tw-translate-y: calc(var(--spacing) * -1);
    translate: var(--tw-translate-x) var(--tw-translate-y);
  }
  .-translate-y-1\/2 {
    --tw-translate-y: calc(calc(1/2 * 100%) * -1);
    translate: var(--tw-translate-x) var(--tw-translate-y);
  }
  .transform {
    transform: var(--tw-rotate-x,) var(--tw-rotate-y,) var(--tw-rotate-z,) var(--tw-skew-x,) var(--tw-skew-y,);
  }
  .skeleton {
    @layer daisyui.component {
      border-radius: var(--radius-box);
      background-color: var(--color-base-300);
      @media (prefers-reduced-motion: reduce) {
        transition-duration: 15s;
      }
      will-change: background-position;
      background-image: linear-gradient( 105deg, #0000 0% 40%, var(--color-base-100) 50%, #0000 60% 100% );
      background-size: 200% auto;
      background-repeat: no-repeat;
      background-position-x: -50%;
      @media (prefers-reduced-motion: no-preference) {
        animation: skeleton 1.8s ease-in-out infinite;
      }
    }
  }
  .link {
    @layer daisyui.component {
      cursor: pointer;
      text-decoration-line: underline;
      &:focus {
        --tw-outline-style: none;
        outline-style: none;
        @media (forced-colors: active) {
          outline: 2px solid transparent;
          outline-offset: 2px;
        }
      }
      &:focus-visible {
        outline: 2px solid currentColor;
        outline-offset: 2px;
      }
    }
  }
  .cursor-pointer {
    cursor: pointer;
  }
  .resize {
    resize: both;
  }
  .grid-cols-2 {
    grid-template-columns: repeat(2, minmax(0, 1fr));
  }
  .grid-cols-3 {
    grid-template-columns: repeat(3, minmax(0, 1fr));
  }
  .grid-rows-\[auto\] {
    grid-template-rows: auto;
  }
  .flex-col {
    flex-direction: column;
  }
  .flex-row {
    flex-direction: row;
  }
  .flex-row-reverse {
    flex-direction: row-reverse;
  }
  .flex-wrap {
    flex-wrap: wrap;
  }
  .items-center {
    align-items: center;
  }
  .items-start {
    align-items: flex-start;
  }
  .justify-around {
    justify-content: space-around;
  }
  .justify-between {
    justify-content: space-between;
  }
  .justify-center {
    justify-content: center;
  }
  .justify-end {
    justify-content: flex-end;
  }
  .justify-start {
    justify-content: flex-start;
  }
  .gap-0 {
    gap: calc(var(--spacing) * 0);
  }
  .gap-1 {
    gap: calc(var(--spacing) * 1);
  }
  .gap-2 {
    gap: calc(var(--spacing) * 2);
  }
  .gap-3 {
    gap: calc(var(--spacing) * 3);
  }
  .gap-4 {
    gap: calc(var(--spacing) * 4);
  }
  .gap-5 {
    gap: calc(var(--spacing) * 5);
  }
  .gap-6 {
    gap: calc(var(--spacing) * 6);
  }
  .gap-10 {
    gap: calc(var(--spacing) * 10);
  }
  .gap-20 {
    gap: calc(var(--spacing) * 20);
  }
  .self-center {
    align-self: center;
  }
  .self-end {
    align-self: flex-end;
  }
  .self-start {
    align-self: flex-start;
  }
  .overflow-auto {
    overflow: auto;
  }
  .overflow-hidden {
    overflow: hidden;
  }
  .overflow-scroll {
    overflow: scroll;
  }
  .overflow-x-scroll {
    overflow-x: scroll;
  }
  .overflow-y-auto {
    overflow-y: auto;
  }
  .overflow-y-scroll {
    overflow-y: scroll;
  }
  .menu-sm {
    @layer daisyui.modifier {
      :where(li:not(.menu-title) > *:not(ul, details, .menu-title)), :where(li:not(.menu-title) > details > summary:not(.menu-title)) {
        border-radius: var(--radius-field);
        padding-inline: calc(0.25rem * 2.5);
        padding-block: calc(0.25rem * 1);
        font-size: 0.75rem;
      }
      .menu-title {
        padding-inline: calc(0.25rem * 3);
        padding-block: calc(0.25rem * 2);
      }
    }
  }
  .rounded {
    border-radius: 0.25rem;
  }
  .rounded-2xl {
    border-radius: var(--radius-2xl);
  }
  .rounded-\[0px_0px_0px_20px\] {
    border-radius: 0px 0px 0px 20px;
  }
  .rounded-\[0px_0px_20px_0px\] {
    border-radius: 0px 0px 20px 0px;
  }
  .rounded-\[0px_2px_0px_20px\] {
    border-radius: 0px 2px 0px 20px;
  }
  .rounded-\[0px_2px_2px_0px\] {
    border-radius: 0px 2px 2px 0px;
  }
  .rounded-\[0px_2px_2px_20px\] {
    border-radius: 0px 2px 2px 20px;
  }
  .rounded-\[0px_10px_10px_10px\] {
    border-radius: 0px 10px 10px 10px;
  }
  .rounded-\[0px_20px_0px_20px\] {
    border-radius: 0px 20px 0px 20px;
  }
  .rounded-\[0px_20px_2px_0px\] {
    border-radius: 0px 20px 2px 0px;
  }
  .rounded-\[0px_20px_20px_0px\] {
    border-radius: 0px 20px 20px 0px;
  }
  .rounded-\[0px_20px_20px_20px\] {
    border-radius: 0px 20px 20px 20px;
  }
  .rounded-\[2px\] {
    border-radius: 2px;
  }
  .rounded-\[4px\] {
    border-radius: 4px;
  }
  .rounded-\[5px\] {
    border-radius: 5px;
  }
  .rounded-\[6px\] {
    border-radius: 6px;
  }
  .rounded-\[10\] {
    border-radius: 10;
  }
  .rounded-\[10p\] {
    border-radius: 10p;
  }
  .rounded-\[10px\] {
    border-radius: 10px;
  }
  .rounded-\[10px_0px_0px_20px\] {
    border-radius: 10px 0px 0px 20px;
  }
  .rounded-\[10px_10px_10px_10px\] {
    border-radius: 10px 10px 10px 10px;
  }
  .rounded-\[10px_\] {
    border-radius: 10px ;
  }
  .rounded-\[12px\] {
    border-radius: 12px;
  }
  .rounded-\[13px\] {
    border-radius: 13px;
  }
  .rounded-\[15px\] {
    border-radius: 15px;
  }
  .rounded-\[20\] {
    border-radius: 20;
  }
  .rounded-\[20px\] {
    border-radius: 20px;
  }
  .rounded-\[20px_0px_0px_10px\] {
    border-radius: 20px 0px 0px 10px;
  }
  .rounded-\[20px_0px_0px_20px\] {
    border-radius: 20px 0px 0px 20px;
  }
  .rounded-\[20px_0px_10px_10px\] {
    border-radius: 20px 0px 10px 10px;
  }
  .rounded-\[20px_0px_20px_0px\] {
    border-radius: 20px 0px 20px 0px;
  }
  .rounded-\[20px_0px_20px_20px\] {
    border-radius: 20px 0px 20px 20px;
  }
  .rounded-\[20px_10px_10px_10px\] {
    border-radius: 20px 10px 10px 10px;
  }
  .rounded-\[20px_20px_20px_20px\] {
    border-radius: 20px 20px 20px 20px;
  }
  .rounded-box {
    border-radius: var(--radius-box);
  }
  .rounded-box {
    border-radius: var(--radius-box);
  }
  .rounded-xl {
    border-radius: var(--radius-xl);
  }
  .rounded-b-2xl {
    border-bottom-right-radius: var(--radius-2xl);
    border-bottom-left-radius: var(--radius-2xl);
  }
  .border {
    border-style: var(--tw-border-style);
    border-width: 1px;
  }
  .border-0 {
    border-style: var(--tw-border-style);
    border-width: 0px;
  }
  .border-1 {
    border-style: var(--tw-border-style);
    border-width: 1px;
  }
  .border-5 {
    border-style: var(--tw-border-style);
    border-width: 5px;
  }
  .border-b {
    border-bottom-style: var(--tw-border-style);
    border-bottom-width: 1px;
  }
  .border-b-1 {
    border-bottom-style: var(--tw-border-style);
    border-bottom-width: 1px;
  }
  .border-b-5 {
    border-bottom-style: var(--tw-border-style);
    border-bottom-width: 5px;
  }
  .border-b-\[1\] {
    border-bottom-style: var(--tw-border-style);
    border-bottom-width: 1;
  }
  .border-b-\[1px\] {
    border-bottom-style: var(--tw-border-style);
    border-bottom-width: 1px;
  }
  .border-\[\#00\] {
    border-color: #00;
  }
  .border-\[\#0005\] {
    border-color: #0005;
  }
  .border-\[\#0007\] {
    border-color: #0007;
  }
  .border-\[\#0009\] {
    border-color: #0009;
  }
  .border-\[\#009\] {
    border-color: #009;
  }
  .border-\[\#ddd\] {
    border-color: #ddd;
  }
  .border-base-200 {
    border-color: var(--color-base-200);
  }
  .border-base-300 {
    border-color: var(--color-base-300);
  }
  .border-red-500 {
    border-color: var(--color-red-500);
  }
  .border-white {
    border-color: var(--color-white);
  }
  .border-white\/30 {
    border-color: color-mix(in srgb, #fff 30%, transparent);
    @supports (color: color-mix(in lab, red, red)) {
      & {
        border-color: color-mix(in oklab, var(--color-white) 30%, transparent);
      }
    }
  }
  .border-b-\[\#ddd\] {
    border-bottom-color: #ddd;
  }
  .bg-\[\#0001\] {
    background-color: #0001;
  }
  .bg-\[\#0002\] {
    background-color: #0002;
  }
  .bg-\[\#0003\] {
    background-color: #0003;
  }
  .bg-\[\#0004\] {
    background-color: #0004;
  }
  .bg-\[\#0007\] {
    background-color: #0007;
  }
  .bg-\[\#ddd\] {
    background-color: #ddd;
  }
  .bg-\[\#ffffff\] {
    background-color: #ffffff;
  }
  .bg-accent {
    background-color: var(--color-accent);
  }
  .bg-base-100 {
    background-color: var(--color-base-100);
  }
  .bg-black {
    background-color: var(--color-black);
  }
  .bg-red-400 {
    background-color: var(--color-red-400);
  }
  .bg-red-500 {
    background-color: var(--color-red-500);
  }
  .bg-red-600 {
    background-color: var(--color-red-600);
  }
  .bg-transparent {
    background-color: transparent;
  }
  .bg-white {
    background-color: var(--color-white);
  }
  .object-cover {
    object-fit: cover;
  }
  .p-1 {
    padding: calc(var(--spacing) * 1);
  }
  .p-2 {
    padding: calc(var(--spacing) * 2);
  }
  .p-3 {
    padding: calc(var(--spacing) * 3);
  }
  .p-4 {
    padding: calc(var(--spacing) * 4);
  }
  .p-5 {
    padding: calc(var(--spacing) * 5);
  }
  .p-6 {
    padding: calc(var(--spacing) * 6);
  }
  .p-10 {
    padding: calc(var(--spacing) * 10);
  }
  .p-33 {
    padding: calc(var(--spacing) * 33);
  }
  .p-\[1px_3px\] {
    padding: 1px 3px;
  }
  .p-\[2px_2px\] {
    padding: 2px 2px;
  }
  .p-\[2px_3px\] {
    padding: 2px 3px;
  }
  .p-\[2px_10px\] {
    padding: 2px 10px;
  }
  .p-\[2px_20px\] {
    padding: 2px 20px;
  }
  .p-\[2px_\] {
    padding: 2px ;
  }
  .p-\[3px_1px\] {
    padding: 3px 1px;
  }
  .p-\[3px_3px\] {
    padding: 3px 3px;
  }
  .p-\[4px_10px\] {
    padding: 4px 10px;
  }
  .p-\[5px_3px\] {
    padding: 5px 3px;
  }
  .p-\[5px_10px\] {
    padding: 5px 10px;
  }
  .p-\[5px_15px\] {
    padding: 5px 15px;
  }
  .p-\[5px_20px\] {
    padding: 5px 20px;
  }
  .p-\[7px_25px\] {
    padding: 7px 25px;
  }
  .p-\[8px_12px\] {
    padding: 8px 12px;
  }
  .p-\[8px_20px\] {
    padding: 8px 20px;
  }
  .p-\[8px_25px\] {
    padding: 8px 25px;
  }
  .p-\[8px_30px\] {
    padding: 8px 30px;
  }
  .p-\[10px\] {
    padding: 10px;
  }
  .p-\[10px_20px\] {
    padding: 10px 20px;
  }
  .p-\[10px_25px\] {
    padding: 10px 25px;
  }
  .p-\[px_25px\] {
    padding: px 25px;
  }
  .menu-title {
    @layer daisyui.component {
      padding-inline: calc(0.25rem * 3);
      padding-block: calc(0.25rem * 2);
      color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        & {
          color: color-mix(in oklab, var(--color-base-content) 40%, transparent);
        }
      }
      font-size: 0.875rem;
      font-weight: 600;
    }
  }
  .badge-xs {
    @layer daisyui.modifier {
      --size: calc(var(--size-selector, 0.25rem) * 4);
      font-size: 0.625rem;
      padding-inline: calc(0.25rem * 2 - var(--border));
    }
  }
  .px-2 {
    padding-inline: calc(var(--spacing) * 2);
  }
  .px-3 {
    padding-inline: calc(var(--spacing) * 3);
  }
  .px-4 {
    padding-inline: calc(var(--spacing) * 4);
  }
  .px-5 {
    padding-inline: calc(var(--spacing) * 5);
  }
  .px-6 {
    padding-inline: calc(var(--spacing) * 6);
  }
  .px-10 {
    padding-inline: calc(var(--spacing) * 10);
  }
  .py-1 {
    padding-block: calc(var(--spacing) * 1);
  }
  .py-2 {
    padding-block: calc(var(--spacing) * 2);
  }
  .py-3 {
    padding-block: calc(var(--spacing) * 3);
  }
  .py-4 {
    padding-block: calc(var(--spacing) * 4);
  }
  .py-5 {
    padding-block: calc(var(--spacing) * 5);
  }
  .pr-2 {
    padding-right: calc(var(--spacing) * 2);
  }
  .pb-2 {
    padding-bottom: calc(var(--spacing) * 2);
  }
  .pb-5 {
    padding-bottom: calc(var(--spacing) * 5);
  }
  .pb-10 {
    padding-bottom: calc(var(--spacing) * 10);
  }
  .text-end {
    text-align: end;
  }
  .text-2xl {
    font-size: var(--text-2xl);
    line-height: var(--tw-leading, var(--text-2xl--line-height));
  }
  .text-lg {
    font-size: var(--text-lg);
    line-height: var(--tw-leading, var(--text-lg--line-height));
  }
  .text-sm {
    font-size: var(--text-sm);
    line-height: var(--tw-leading, var(--text-sm--line-height));
  }
  .text-xl {
    font-size: var(--text-xl);
    line-height: var(--tw-leading, var(--text-xl--line-height));
  }
  .text-\[10px\] {
    font-size: 10px;
  }
  .text-\[13px\] {
    font-size: 13px;
  }
  .text-\[14px\] {
    font-size: 14px;
  }
  .text-\[16px\] {
    font-size: 16px;
  }
  .text-\[17px\] {
    font-size: 17px;
  }
  .text-\[20px\] {
    font-size: 20px;
  }
  .text-\[24px\] {
    font-size: 24px;
  }
  .text-\[30px\] {
    font-size: 30px;
  }
  .font-bold {
    --tw-font-weight: var(--font-weight-bold);
    font-weight: var(--font-weight-bold);
  }
  .font-semibold {
    --tw-font-weight: var(--font-weight-semibold);
    font-weight: var(--font-weight-semibold);
  }
  .text-wrap {
    text-wrap: wrap;
  }
  .text-\[\#0004\] {
    color: #0004;
  }
  .text-\[\#0005\] {
    color: #0005;
  }
  .text-\[\#0007\] {
    color: #0007;
  }
  .text-\[\#0008\] {
    color: #0008;
  }
  .text-\[\#0009\] {
    color: #0009;
  }
  .text-\[\#009\] {
    color: #009;
  }
  .text-\[\#\] {
    color: #;
  }
  .text-\[\#ddd\] {
    color: #ddd;
  }
  .text-\[\$\] {
    color: $;
  }
  .text-\[1\] {
    color: 1;
  }
  .text-\[13\] {
    color: 13;
  }
  .text-\[red\] {
    color: red;
  }
  .text-base-content {
    color: var(--color-base-content);
  }
  .text-black {
    color: var(--color-black);
  }
  .text-gray-50 {
    color: var(--color-gray-50);
  }
  .text-gray-500 {
    color: var(--color-gray-500);
  }
  .text-red-50 {
    color: var(--color-red-50);
  }
  .text-red-500 {
    color: var(--color-red-500);
  }
  .text-red-600 {
    color: var(--color-red-600);
  }
  .text-warning {
    color: var(--color-warning);
  }
  .text-white {
    color: var(--color-white);
  }
  .normal-case {
    text-transform: none;
  }
  .uppercase {
    text-transform: uppercase;
  }
  .underline {
    text-decoration-line: underline;
  }
  .opacity-0 {
    opacity: 0%;
  }
  .opacity-50 {
    opacity: 50%;
  }
  .shadow {
    --tw-shadow: 0 1px 3px 0 var(--tw-shadow-color, rgb(0 0 0 / 0.1)), 0 1px 2px -1px var(--tw-shadow-color, rgb(0 0 0 / 0.1));
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }
  .shadow-sm {
    --tw-shadow: 0 1px 3px 0 var(--tw-shadow-color, rgb(0 0 0 / 0.1)), 0 1px 2px -1px var(--tw-shadow-color, rgb(0 0 0 / 0.1));
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }
  .outline {
    outline-style: var(--tw-outline-style);
    outline-width: 1px;
  }
  .btn-ghost {
    @layer daisyui.modifier {
      &:not(.btn-active, :hover, :active:focus, :focus-visible) {
        --btn-shadow: "";
        --btn-bg: #0000;
        --btn-border: #0000;
        --btn-noise: none;
        &:not(:disabled, [disabled], .btn-disabled) {
          outline-color: currentcolor;
          --btn-fg: currentColor;
        }
      }
      @media (hover: none) {
        &:hover:not(.btn-active, :active, :focus-visible, :disabled, [disabled], .btn-disabled) {
          --btn-shadow: "";
          --btn-bg: #0000;
          --btn-border: #0000;
          --btn-noise: none;
          --btn-fg: currentColor;
        }
      }
    }
  }
  .filter {
    filter: var(--tw-blur,) var(--tw-brightness,) var(--tw-contrast,) var(--tw-grayscale,) var(--tw-hue-rotate,) var(--tw-invert,) var(--tw-saturate,) var(--tw-sepia,) var(--tw-drop-shadow,);
  }
  .transition {
    transition-property: color, background-color, border-color, outline-color, text-decoration-color, fill, stroke, --tw-gradient-from, --tw-gradient-via, --tw-gradient-to, opacity, box-shadow, transform, translate, scale, rotate, filter, -webkit-backdrop-filter, backdrop-filter, display, content-visibility, overlay, pointer-events;
    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
    transition-duration: var(--tw-duration, var(--default-transition-duration));
  }
  .transition-all {
    transition-property: all;
    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
    transition-duration: var(--tw-duration, var(--default-transition-duration));
  }
  .transition-colors {
    transition-property: color, background-color, border-color, outline-color, text-decoration-color, fill, stroke, --tw-gradient-from, --tw-gradient-via, --tw-gradient-to;
    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
    transition-duration: var(--tw-duration, var(--default-transition-duration));
  }
  .duration-300 {
    --tw-duration: 300ms;
    transition-duration: 300ms;
  }
  .ease-in-out {
    --tw-ease: var(--ease-in-out);
    transition-timing-function: var(--ease-in-out);
  }
  .ease-out {
    --tw-ease: var(--ease-out);
    transition-timing-function: var(--ease-out);
  }
  .badge-primary {
    @layer daisyui.modifier {
      --badge-color: var(--color-primary);
      --badge-fg: var(--color-primary-content);
    }
  }
  .outline-none {
    --tw-outline-style: none;
    outline-style: none;
  }
  .text-shadow-gray-50 {
    --tw-text-shadow-color: oklch(98.5% 0.002 247.839);
    @supports (color: color-mix(in lab, red, red)) {
      & {
        --tw-text-shadow-color: color-mix(in oklab, var(--color-gray-50) var(--tw-text-shadow-alpha), transparent);
      }
    }
  }
  .hover\:text-\[\#000\] {
    &:hover {
      @media (hover: hover) {
        color: #000;
      }
    }
  }
  .hover\:text-black {
    &:hover {
      @media (hover: hover) {
        color: var(--color-black);
      }
    }
  }
  .hover\:text-gray-200 {
    &:hover {
      @media (hover: hover) {
        color: var(--color-gray-200);
      }
    }
  }
  .hover\:text-gray-300 {
    &:hover {
      @media (hover: hover) {
        color: var(--color-gray-300);
      }
    }
  }
  .hover\:text-gray-400 {
    &:hover {
      @media (hover: hover) {
        color: var(--color-gray-400);
      }
    }
  }
  .hover\:text-red-500 {
    &:hover {
      @media (hover: hover) {
        color: var(--color-red-500);
      }
    }
  }
  .hover\:text-red-600 {
    &:hover {
      @media (hover: hover) {
        color: var(--color-red-600);
      }
    }
  }
  .hover\:text-red-700 {
    &:hover {
      @media (hover: hover) {
        color: var(--color-red-700);
      }
    }
  }
  .hover\:text-yellow-100 {
    &:hover {
      @media (hover: hover) {
        color: var(--color-yellow-100);
      }
    }
  }
  .md\:absolute {
    @media (width >= 48rem) {
      position: absolute;
    }
  }
  .md\:mx-10 {
    @media (width >= 48rem) {
      margin-inline: calc(var(--spacing) * 10);
    }
  }
  .md\:mx-20 {
    @media (width >= 48rem) {
      margin-inline: calc(var(--spacing) * 20);
    }
  }
  .md\:mx-30 {
    @media (width >= 48rem) {
      margin-inline: calc(var(--spacing) * 30);
    }
  }
  .md\:my-5 {
    @media (width >= 48rem) {
      margin-block: calc(var(--spacing) * 5);
    }
  }
  .md\:mb-1 {
    @media (width >= 48rem) {
      margin-bottom: calc(var(--spacing) * 1);
    }
  }
  .md\:mb-2 {
    @media (width >= 48rem) {
      margin-bottom: calc(var(--spacing) * 2);
    }
  }
  .md\:flex {
    @media (width >= 48rem) {
      display: flex;
    }
  }
  .md\:grid {
    @media (width >= 48rem) {
      display: grid;
    }
  }
  .md\:hidden {
    @media (width >= 48rem) {
      display: none;
    }
  }
  .md\:h-10 {
    @media (width >= 48rem) {
      height: calc(var(--spacing) * 10);
    }
  }
  .md\:h-100 {
    @media (width >= 48rem) {
      height: calc(var(--spacing) * 100);
    }
  }
  .md\:h-\[100px\] {
    @media (width >= 48rem) {
      height: 100px;
    }
  }
  .md\:h-\[120px\] {
    @media (width >= 48rem) {
      height: 120px;
    }
  }
  .md\:h-\[150p\] {
    @media (width >= 48rem) {
      height: 150p;
    }
  }
  .md\:h-\[150px\] {
    @media (width >= 48rem) {
      height: 150px;
    }
  }
  .md\:h-\[200px\] {
    @media (width >= 48rem) {
      height: 200px;
    }
  }
  .md\:w-0 {
    @media (width >= 48rem) {
      width: calc(var(--spacing) * 0);
    }
  }
  .md\:w-\[0\%\] {
    @media (width >= 48rem) {
      width: 0%;
    }
  }
  .md\:w-\[10\] {
    @media (width >= 48rem) {
      width: 10;
    }
  }
  .md\:w-\[10px\] {
    @media (width >= 48rem) {
      width: 10px;
    }
  }
  .md\:w-\[50\%\] {
    @media (width >= 48rem) {
      width: 50%;
    }
  }
  .md\:w-\[50px\] {
    @media (width >= 48rem) {
      width: 50px;
    }
  }
  .md\:w-\[100px\] {
    @media (width >= 48rem) {
      width: 100px;
    }
  }
  .md\:w-\[120px\] {
    @media (width >= 48rem) {
      width: 120px;
    }
  }
  .md\:w-\[500px\] {
    @media (width >= 48rem) {
      width: 500px;
    }
  }
  .md\:w-\[1200px\] {
    @media (width >= 48rem) {
      width: 1200px;
    }
  }
  .md\:w-full {
    @media (width >= 48rem) {
      width: 100%;
    }
  }
  .md\:max-w-\[50\%\] {
    @media (width >= 48rem) {
      max-width: 50%;
    }
  }
  .md\:max-w-\[300\] {
    @media (width >= 48rem) {
      max-width: 300;
    }
  }
  .md\:max-w-\[300px\] {
    @media (width >= 48rem) {
      max-width: 300px;
    }
  }
  .md\:max-w-\[500px\] {
    @media (width >= 48rem) {
      max-width: 500px;
    }
  }
  .md\:max-w-\[520px\] {
    @media (width >= 48rem) {
      max-width: 520px;
    }
  }
  .md\:max-w-\[550px\] {
    @media (width >= 48rem) {
      max-width: 550px;
    }
  }
  .md\:max-w-\[600px\] {
    @media (width >= 48rem) {
      max-width: 600px;
    }
  }
  .md\:max-w-\[700px\] {
    @media (width >= 48rem) {
      max-width: 700px;
    }
  }
  .md\:grid-cols-2 {
    @media (width >= 48rem) {
      grid-template-columns: repeat(2, minmax(0, 1fr));
    }
  }
  .md\:grid-cols-3 {
    @media (width >= 48rem) {
      grid-template-columns: repeat(3, minmax(0, 1fr));
    }
  }
  .md\:grid-rows-2 {
    @media (width >= 48rem) {
      grid-template-rows: repeat(2, minmax(0, 1fr));
    }
  }
  .md\:grid-rows-3 {
    @media (width >= 48rem) {
      grid-template-rows: repeat(3, minmax(0, 1fr));
    }
  }
  .md\:grid-rows-4 {
    @media (width >= 48rem) {
      grid-template-rows: repeat(4, minmax(0, 1fr));
    }
  }
  .md\:items-center {
    @media (width >= 48rem) {
      align-items: center;
    }
  }
  .md\:justify-around {
    @media (width >= 48rem) {
      justify-content: space-around;
    }
  }
  .md\:justify-between {
    @media (width >= 48rem) {
      justify-content: space-between;
    }
  }
  .md\:justify-center {
    @media (width >= 48rem) {
      justify-content: center;
    }
  }
  .md\:justify-end {
    @media (width >= 48rem) {
      justify-content: flex-end;
    }
  }
  .md\:gap-3 {
    @media (width >= 48rem) {
      gap: calc(var(--spacing) * 3);
    }
  }
  .md\:gap-4 {
    @media (width >= 48rem) {
      gap: calc(var(--spacing) * 4);
    }
  }
  .md\:gap-10 {
    @media (width >= 48rem) {
      gap: calc(var(--spacing) * 10);
    }
  }
  .md\:gap-20 {
    @media (width >= 48rem) {
      gap: calc(var(--spacing) * 20);
    }
  }
  .md\:gap-30 {
    @media (width >= 48rem) {
      gap: calc(var(--spacing) * 30);
    }
  }
  .md\:rounded {
    @media (width >= 48rem) {
      border-radius: 0.25rem;
    }
  }
  .md\:rounded-\[4px\] {
    @media (width >= 48rem) {
      border-radius: 4px;
    }
  }
  .md\:rounded-\[12\] {
    @media (width >= 48rem) {
      border-radius: 12;
    }
  }
  .md\:rounded-\[12px\] {
    @media (width >= 48rem) {
      border-radius: 12px;
    }
  }
  .md\:bg-red-500 {
    @media (width >= 48rem) {
      background-color: var(--color-red-500);
    }
  }
  .md\:py-\[2\] {
    @media (width >= 48rem) {
      padding-block: 2;
    }
  }
  .md\:py-\[2px\] {
    @media (width >= 48rem) {
      padding-block: 2px;
    }
  }
  .md\:py-\[3px\] {
    @media (width >= 48rem) {
      padding-block: 3px;
    }
  }
  .md\:py-\[4px\] {
    @media (width >= 48rem) {
      padding-block: 4px;
    }
  }
  .md\:py-\[6px\] {
    @media (width >= 48rem) {
      padding-block: 6px;
    }
  }
  .md\:text-center {
    @media (width >= 48rem) {
      text-align: center;
    }
  }
  .md\:text-end {
    @media (width >= 48rem) {
      text-align: end;
    }
  }
  .md\:text-start {
    @media (width >= 48rem) {
      text-align: start;
    }
  }
  .md\:text-\[0px\] {
    @media (width >= 48rem) {
      font-size: 0px;
    }
  }
  .md\:text-\[1px\] {
    @media (width >= 48rem) {
      font-size: 1px;
    }
  }
  .md\:text-\[10px\] {
    @media (width >= 48rem) {
      font-size: 10px;
    }
  }
  .md\:text-\[12px\] {
    @media (width >= 48rem) {
      font-size: 12px;
    }
  }
  .md\:text-\[13px\] {
    @media (width >= 48rem) {
      font-size: 13px;
    }
  }
  .md\:text-\[15px\] {
    @media (width >= 48rem) {
      font-size: 15px;
    }
  }
  .md\:text-\[16px\] {
    @media (width >= 48rem) {
      font-size: 16px;
    }
  }
  .md\:text-\[20px\] {
    @media (width >= 48rem) {
      font-size: 20px;
    }
  }
  .md\:text-\[25px\] {
    @media (width >= 48rem) {
      font-size: 25px;
    }
  }
  .md\:text-\[30px\] {
    @media (width >= 48rem) {
      font-size: 30px;
    }
  }
  .md\:text-\[40px\] {
    @media (width >= 48rem) {
      font-size: 40px;
    }
  }
  .md\:text-\[50px\] {
    @media (width >= 48rem) {
      font-size: 50px;
    }
  }
  .md\:text-\[\#fff\] {
    @media (width >= 48rem) {
      color: #fff;
    }
  }
  .md\:text-red-500 {
    @media (width >= 48rem) {
      color: var(--color-red-500);
    }
  }
  .lg\:col-\[\/4\] {
    @media (width >= 64rem) {
      grid-column: /4;
    }
  }
  .lg\:col-\[0\/1\] {
    @media (width >= 64rem) {
      grid-column: 0/1;
    }
  }
  .lg\:col-\[0\/3\] {
    @media (width >= 64rem) {
      grid-column: 0/3;
    }
  }
  .lg\:col-\[1\/1\] {
    @media (width >= 64rem) {
      grid-column: 1/1;
    }
  }
  .lg\:col-\[1\/2\] {
    @media (width >= 64rem) {
      grid-column: 1/2;
    }
  }
  .lg\:col-\[1\/3\] {
    @media (width >= 64rem) {
      grid-column: 1/3;
    }
  }
  .lg\:col-\[1\/4\] {
    @media (width >= 64rem) {
      grid-column: 1/4;
    }
  }
  .lg\:col-\[1\/5\] {
    @media (width >= 64rem) {
      grid-column: 1/5;
    }
  }
  .lg\:col-\[1\/6\] {
    @media (width >= 64rem) {
      grid-column: 1/6;
    }
  }
  .lg\:col-\[1\/7\] {
    @media (width >= 64rem) {
      grid-column: 1/7;
    }
  }
  .lg\:col-\[1\/8\] {
    @media (width >= 64rem) {
      grid-column: 1/8;
    }
  }
  .lg\:col-\[1\/\] {
    @media (width >= 64rem) {
      grid-column: 1/;
    }
  }
  .lg\:col-\[1\] {
    @media (width >= 64rem) {
      grid-column: 1;
    }
  }
  .lg\:col-\[2\/1\] {
    @media (width >= 64rem) {
      grid-column: 2/1;
    }
  }
  .lg\:col-\[2\/2\] {
    @media (width >= 64rem) {
      grid-column: 2/2;
    }
  }
  .lg\:col-\[2\/3\] {
    @media (width >= 64rem) {
      grid-column: 2/3;
    }
  }
  .lg\:col-\[2\/4\] {
    @media (width >= 64rem) {
      grid-column: 2/4;
    }
  }
  .lg\:col-\[2\/6\] {
    @media (width >= 64rem) {
      grid-column: 2/6;
    }
  }
  .lg\:col-\[2\/\] {
    @media (width >= 64rem) {
      grid-column: 2/;
    }
  }
  .lg\:col-\[3\/4\] {
    @media (width >= 64rem) {
      grid-column: 3/4;
    }
  }
  .lg\:col-\[3\/6\] {
    @media (width >= 64rem) {
      grid-column: 3/6;
    }
  }
  .lg\:col-\[3\/7\] {
    @media (width >= 64rem) {
      grid-column: 3/7;
    }
  }
  .lg\:col-\[3\/8\] {
    @media (width >= 64rem) {
      grid-column: 3/8;
    }
  }
  .lg\:col-\[4\/2\] {
    @media (width >= 64rem) {
      grid-column: 4/2;
    }
  }
  .lg\:col-\[4\/3\] {
    @media (width >= 64rem) {
      grid-column: 4/3;
    }
  }
  .lg\:col-\[4\/4\] {
    @media (width >= 64rem) {
      grid-column: 4/4;
    }
  }
  .lg\:col-\[4\/6\] {
    @media (width >= 64rem) {
      grid-column: 4/6;
    }
  }
  .lg\:col-\[4\/8\] {
    @media (width >= 64rem) {
      grid-column: 4/8;
    }
  }
  .lg\:row-\[0\/1\] {
    @media (width >= 64rem) {
      grid-row: 0/1;
    }
  }
  .lg\:row-\[0\/3\] {
    @media (width >= 64rem) {
      grid-row: 0/3;
    }
  }
  .lg\:row-\[1\/1\] {
    @media (width >= 64rem) {
      grid-row: 1/1;
    }
  }
  .lg\:row-\[1\/2\] {
    @media (width >= 64rem) {
      grid-row: 1/2;
    }
  }
  .lg\:row-\[1\/3\] {
    @media (width >= 64rem) {
      grid-row: 1/3;
    }
  }
  .lg\:row-\[1\/4\] {
    @media (width >= 64rem) {
      grid-row: 1/4;
    }
  }
  .lg\:row-\[1\/20\] {
    @media (width >= 64rem) {
      grid-row: 1/20;
    }
  }
  .lg\:row-\[1\/\] {
    @media (width >= 64rem) {
      grid-row: 1/;
    }
  }
  .lg\:row-\[1\] {
    @media (width >= 64rem) {
      grid-row: 1;
    }
  }
  .lg\:row-\[2\/2\] {
    @media (width >= 64rem) {
      grid-row: 2/2;
    }
  }
  .lg\:row-\[2\/4\] {
    @media (width >= 64rem) {
      grid-row: 2/4;
    }
  }
  .lg\:row-\[3\/6\] {
    @media (width >= 64rem) {
      grid-row: 3/6;
    }
  }
  .lg\:row-\[4\/4\] {
    @media (width >= 64rem) {
      grid-row: 4/4;
    }
  }
  .lg\:row-\[4\/5\] {
    @media (width >= 64rem) {
      grid-row: 4/5;
    }
  }
  .lg\:row-\[4\/6\] {
    @media (width >= 64rem) {
      grid-row: 4/6;
    }
  }
  .lg\:row-\[4\/\] {
    @media (width >= 64rem) {
      grid-row: 4/;
    }
  }
  .lg\:row-\[4\] {
    @media (width >= 64rem) {
      grid-row: 4;
    }
  }
  .lg\:row-\[5\/5\] {
    @media (width >= 64rem) {
      grid-row: 5/5;
    }
  }
  .lg\:row-\[5\/6\] {
    @media (width >= 64rem) {
      grid-row: 5/6;
    }
  }
  .lg\:row-\[6\/5\] {
    @media (width >= 64rem) {
      grid-row: 6/5;
    }
  }
  .lg\:row-\[6\/6\] {
    @media (width >= 64rem) {
      grid-row: 6/6;
    }
  }
  .lg\:row-\[7\/7\] {
    @media (width >= 64rem) {
      grid-row: 7/7;
    }
  }
  .lg\:row-\[8\/8\] {
    @media (width >= 64rem) {
      grid-row: 8/8;
    }
  }
  .lg\:mt-2 {
    @media (width >= 64rem) {
      margin-top: calc(var(--spacing) * 2);
    }
  }
  .lg\:mt-4 {
    @media (width >= 64rem) {
      margin-top: calc(var(--spacing) * 4);
    }
  }
  .lg\:mt-5 {
    @media (width >= 64rem) {
      margin-top: calc(var(--spacing) * 5);
    }
  }
  .lg\:mt-6 {
    @media (width >= 64rem) {
      margin-top: calc(var(--spacing) * 6);
    }
  }
  .lg\:flex {
    @media (width >= 64rem) {
      display: flex;
    }
  }
  .lg\:grid {
    @media (width >= 64rem) {
      display: grid;
    }
  }
  .lg\:h-75 {
    @media (width >= 64rem) {
      height: calc(var(--spacing) * 75);
    }
  }
  .lg\:h-\[auto\] {
    @media (width >= 64rem) {
      height: auto;
    }
  }
  .lg\:h-auto {
    @media (width >= 64rem) {
      height: auto;
    }
  }
  .lg\:max-h-\[0px\] {
    @media (width >= 64rem) {
      max-height: 0px;
    }
  }
  .lg\:max-h-\[100\%\] {
    @media (width >= 64rem) {
      max-height: 100%;
    }
  }
  .lg\:max-h-\[350px\] {
    @media (width >= 64rem) {
      max-height: 350px;
    }
  }
  .lg\:max-h-\[375px\] {
    @media (width >= 64rem) {
      max-height: 375px;
    }
  }
  .lg\:max-h-\[400px\] {
    @media (width >= 64rem) {
      max-height: 400px;
    }
  }
  .lg\:max-h-\[470px\] {
    @media (width >= 64rem) {
      max-height: 470px;
    }
  }
  .lg\:max-h-\[480px\] {
    @media (width >= 64rem) {
      max-height: 480px;
    }
  }
  .lg\:max-h-\[500px\] {
    @media (width >= 64rem) {
      max-height: 500px;
    }
  }
  .lg\:max-h-\[a\] {
    @media (width >= 64rem) {
      max-height: a;
    }
  }
  .lg\:max-h-\[auto\] {
    @media (width >= 64rem) {
      max-height: auto;
    }
  }
  .lg\:w-\[4\%\] {
    @media (width >= 64rem) {
      width: 4%;
    }
  }
  .lg\:w-\[30\%\] {
    @media (width >= 64rem) {
      width: 30%;
    }
  }
  .lg\:w-\[35\%\] {
    @media (width >= 64rem) {
      width: 35%;
    }
  }
  .lg\:w-\[40\%\] {
    @media (width >= 64rem) {
      width: 40%;
    }
  }
  .lg\:w-\[60\%\] {
    @media (width >= 64rem) {
      width: 60%;
    }
  }
  .lg\:w-\[65\%\] {
    @media (width >= 64rem) {
      width: 65%;
    }
  }
  .lg\:w-\[70\%\] {
    @media (width >= 64rem) {
      width: 70%;
    }
  }
  .lg\:w-\[75\%\] {
    @media (width >= 64rem) {
      width: 75%;
    }
  }
  .lg\:max-w-\[50\%\] {
    @media (width >= 64rem) {
      max-width: 50%;
    }
  }
  .lg\:max-w-\[70\%\] {
    @media (width >= 64rem) {
      max-width: 70%;
    }
  }
  .lg\:max-w-\[200px\] {
    @media (width >= 64rem) {
      max-width: 200px;
    }
  }
  .lg\:max-w-\[400px\] {
    @media (width >= 64rem) {
      max-width: 400px;
    }
  }
  .lg\:max-w-\[460px\] {
    @media (width >= 64rem) {
      max-width: 460px;
    }
  }
  .lg\:max-w-\[500px\] {
    @media (width >= 64rem) {
      max-width: 500px;
    }
  }
  .lg\:max-w-\[520px\] {
    @media (width >= 64rem) {
      max-width: 520px;
    }
  }
  .lg\:max-w-\[4500px\] {
    @media (width >= 64rem) {
      max-width: 4500px;
    }
  }
  .lg\:max-w-\[a\] {
    @media (width >= 64rem) {
      max-width: a;
    }
  }
  .lg\:max-w-\[auto\] {
    @media (width >= 64rem) {
      max-width: auto;
    }
  }
  .lg\:grid-cols-1 {
    @media (width >= 64rem) {
      grid-template-columns: repeat(1, minmax(0, 1fr));
    }
  }
  .lg\:grid-cols-2 {
    @media (width >= 64rem) {
      grid-template-columns: repeat(2, minmax(0, 1fr));
    }
  }
  .lg\:grid-cols-3 {
    @media (width >= 64rem) {
      grid-template-columns: repeat(3, minmax(0, 1fr));
    }
  }
  .lg\:grid-cols-4 {
    @media (width >= 64rem) {
      grid-template-columns: repeat(4, minmax(0, 1fr));
    }
  }
  .lg\:grid-cols-8 {
    @media (width >= 64rem) {
      grid-template-columns: repeat(8, minmax(0, 1fr));
    }
  }
  .lg\:grid-cols-\[6\] {
    @media (width >= 64rem) {
      grid-template-columns: 6;
    }
  }
  .lg\:grid-cols-\[8\] {
    @media (width >= 64rem) {
      grid-template-columns: 8;
    }
  }
  .lg\:grid-rows-3 {
    @media (width >= 64rem) {
      grid-template-rows: repeat(3, minmax(0, 1fr));
    }
  }
  .lg\:grid-rows-8 {
    @media (width >= 64rem) {
      grid-template-rows: repeat(8, minmax(0, 1fr));
    }
  }
  .lg\:grid-rows-10 {
    @media (width >= 64rem) {
      grid-template-rows: repeat(10, minmax(0, 1fr));
    }
  }
  .lg\:grid-rows-\[4\] {
    @media (width >= 64rem) {
      grid-template-rows: 4;
    }
  }
  .lg\:grid-rows-\[5\] {
    @media (width >= 64rem) {
      grid-template-rows: 5;
    }
  }
  .lg\:grid-rows-\[6\] {
    @media (width >= 64rem) {
      grid-template-rows: 6;
    }
  }
  .lg\:grid-rows-\[8\] {
    @media (width >= 64rem) {
      grid-template-rows: 8;
    }
  }
  .lg\:grid-rows-\[10\] {
    @media (width >= 64rem) {
      grid-template-rows: 10;
    }
  }
  .lg\:grid-rows-\[20\] {
    @media (width >= 64rem) {
      grid-template-rows: 20;
    }
  }
  .lg\:grid-rows-\[100\] {
    @media (width >= 64rem) {
      grid-template-rows: 100;
    }
  }
  .lg\:grid-rows-\[auto\] {
    @media (width >= 64rem) {
      grid-template-rows: auto;
    }
  }
  .lg\:flex-row {
    @media (width >= 64rem) {
      flex-direction: row;
    }
  }
  .lg\:items-center {
    @media (width >= 64rem) {
      align-items: center;
    }
  }
  .lg\:justify-center {
    @media (width >= 64rem) {
      justify-content: center;
    }
  }
}
@layer base {
  :where(:root),:root:has(input.theme-controller[value=light]:checked),[data-theme=light] {
    color-scheme: light;
    --color-base-100: oklch(100% 0 0);
    --color-base-200: oklch(98% 0 0);
    --color-base-300: oklch(95% 0 0);
    --color-base-content: oklch(21% 0.006 285.885);
    --color-primary: oklch(45% 0.24 277.023);
    --color-primary-content: oklch(93% 0.034 272.788);
    --color-secondary: oklch(65% 0.241 354.308);
    --color-secondary-content: oklch(94% 0.028 342.258);
    --color-accent: oklch(77% 0.152 181.912);
    --color-accent-content: oklch(38% 0.063 188.416);
    --color-neutral: oklch(14% 0.005 285.823);
    --color-neutral-content: oklch(92% 0.004 286.32);
    --color-info: oklch(74% 0.16 232.661);
    --color-info-content: oklch(29% 0.066 243.157);
    --color-success: oklch(76% 0.177 163.223);
    --color-success-content: oklch(37% 0.077 168.94);
    --color-warning: oklch(82% 0.189 84.429);
    --color-warning-content: oklch(41% 0.112 45.904);
    --color-error: oklch(71% 0.194 13.428);
    --color-error-content: oklch(27% 0.105 12.094);
    --radius-selector: 0.5rem;
    --radius-field: 0.25rem;
    --radius-box: 0.5rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 1;
    --noise: 0;
  }
}
@layer base {
  @media (prefers-color-scheme: dark) {
    :root:not([data-theme]) {
      color-scheme: dark;
      --color-base-100: oklch(25.33% 0.016 252.42);
      --color-base-200: oklch(23.26% 0.014 253.1);
      --color-base-300: oklch(21.15% 0.012 254.09);
      --color-base-content: oklch(97.807% 0.029 256.847);
      --color-primary: oklch(58% 0.233 277.117);
      --color-primary-content: oklch(96% 0.018 272.314);
      --color-secondary: oklch(65% 0.241 354.308);
      --color-secondary-content: oklch(94% 0.028 342.258);
      --color-accent: oklch(77% 0.152 181.912);
      --color-accent-content: oklch(38% 0.063 188.416);
      --color-neutral: oklch(14% 0.005 285.823);
      --color-neutral-content: oklch(92% 0.004 286.32);
      --color-info: oklch(74% 0.16 232.661);
      --color-info-content: oklch(29% 0.066 243.157);
      --color-success: oklch(76% 0.177 163.223);
      --color-success-content: oklch(37% 0.077 168.94);
      --color-warning: oklch(82% 0.189 84.429);
      --color-warning-content: oklch(41% 0.112 45.904);
      --color-error: oklch(71% 0.194 13.428);
      --color-error-content: oklch(27% 0.105 12.094);
      --radius-selector: 0.5rem;
      --radius-field: 0.25rem;
      --radius-box: 0.5rem;
      --size-selector: 0.25rem;
      --size-field: 0.25rem;
      --border: 1px;
      --depth: 1;
      --noise: 0;
    }
  }
}
@layer base {
  :root:has(input.theme-controller[value=light]:checked),[data-theme=light] {
    color-scheme: light;
    --color-base-100: oklch(100% 0 0);
    --color-base-200: oklch(98% 0 0);
    --color-base-300: oklch(95% 0 0);
    --color-base-content: oklch(21% 0.006 285.885);
    --color-primary: oklch(45% 0.24 277.023);
    --color-primary-content: oklch(93% 0.034 272.788);
    --color-secondary: oklch(65% 0.241 354.308);
    --color-secondary-content: oklch(94% 0.028 342.258);
    --color-accent: oklch(77% 0.152 181.912);
    --color-accent-content: oklch(38% 0.063 188.416);
    --color-neutral: oklch(14% 0.005 285.823);
    --color-neutral-content: oklch(92% 0.004 286.32);
    --color-info: oklch(74% 0.16 232.661);
    --color-info-content: oklch(29% 0.066 243.157);
    --color-success: oklch(76% 0.177 163.223);
    --color-success-content: oklch(37% 0.077 168.94);
    --color-warning: oklch(82% 0.189 84.429);
    --color-warning-content: oklch(41% 0.112 45.904);
    --color-error: oklch(71% 0.194 13.428);
    --color-error-content: oklch(27% 0.105 12.094);
    --radius-selector: 0.5rem;
    --radius-field: 0.25rem;
    --radius-box: 0.5rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 1;
    --noise: 0;
  }
}
@layer base {
  :root:has(input.theme-controller[value=dark]:checked),[data-theme=dark] {
    color-scheme: dark;
    --color-base-100: oklch(25.33% 0.016 252.42);
    --color-base-200: oklch(23.26% 0.014 253.1);
    --color-base-300: oklch(21.15% 0.012 254.09);
    --color-base-content: oklch(97.807% 0.029 256.847);
    --color-primary: oklch(58% 0.233 277.117);
    --color-primary-content: oklch(96% 0.018 272.314);
    --color-secondary: oklch(65% 0.241 354.308);
    --color-secondary-content: oklch(94% 0.028 342.258);
    --color-accent: oklch(77% 0.152 181.912);
    --color-accent-content: oklch(38% 0.063 188.416);
    --color-neutral: oklch(14% 0.005 285.823);
    --color-neutral-content: oklch(92% 0.004 286.32);
    --color-info: oklch(74% 0.16 232.661);
    --color-info-content: oklch(29% 0.066 243.157);
    --color-success: oklch(76% 0.177 163.223);
    --color-success-content: oklch(37% 0.077 168.94);
    --color-warning: oklch(82% 0.189 84.429);
    --color-warning-content: oklch(41% 0.112 45.904);
    --color-error: oklch(71% 0.194 13.428);
    --color-error-content: oklch(27% 0.105 12.094);
    --radius-selector: 0.5rem;
    --radius-field: 0.25rem;
    --radius-box: 0.5rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 1;
    --noise: 0;
  }
}
@layer base {
  :root {
    --fx-noise: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 200 200'%3E%3Cfilter id='a'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='1.34' numOctaves='4' stitchTiles='stitch'%3E%3C/feTurbulence%3E%3C/filter%3E%3Crect width='200' height='200' filter='url(%23a)' opacity='0.2'%3E%3C/rect%3E%3C/svg%3E");
  }
}
@layer base {
  :root {
    scrollbar-color: currentColor #0000;
    @supports (color: color-mix(in lab, red, red)) {
      & {
        scrollbar-color: color-mix(in oklch, currentColor 35%, #0000) #0000;
      }
    }
  }
}
@layer base {
  @property --radialprogress {
    syntax: "<percentage>";
    inherits: true;
    initial-value: 0%;
  }
}
@layer base {
  :root:has(.modal-open, .modal[open], .modal:target, .modal-toggle:checked) {
    overflow: hidden;
    --page-has-backdrop: 1;
  }
  :root:has(.drawer:not([class*="drawer-open"]) > .drawer-toggle:checked) {
    overflow: hidden;
    --page-has-backdrop: 1;
  }
  :root:has(.sm\:drawer-open > .drawer-toggle:checked) {
    @media (width < 40rem) {
      overflow: hidden;
    }
    @media (width < 40rem) {
      --page-has-backdrop: 1;
    }
  }
  :root:has(.md\:drawer-open > .drawer-toggle:checked) {
    @media (width < 48rem) {
      overflow: hidden;
    }
    @media (width < 48rem) {
      --page-has-backdrop: 1;
    }
  }
  :root:has(.lg\:drawer-open > .drawer-toggle:checked) {
    @media (width < 64rem) {
      overflow: hidden;
    }
    @media (width < 64rem) {
      --page-has-backdrop: 1;
    }
  }
  :root:has(.xl\:drawer-open > .drawer-toggle:checked) {
    @media (width < 80rem) {
      overflow: hidden;
    }
    @media (width < 80rem) {
      --page-has-backdrop: 1;
    }
  }
  :root:has(.\32xl\:drawer-open > .drawer-toggle:checked) {
    @media (width < 96rem) {
      overflow: hidden;
    }
    @media (width < 96rem) {
      --page-has-backdrop: 1;
    }
  }
  :root:has(.max-sm\:drawer-open > .drawer-toggle:checked) {
    @media (width >= 40rem) {
      overflow: hidden;
    }
    @media (width >= 40rem) {
      --page-has-backdrop: 1;
    }
  }
  :root:has(.max-md\:drawer-open > .drawer-toggle:checked) {
    @media (width >= 48rem) {
      overflow: hidden;
    }
    @media (width >= 48rem) {
      --page-has-backdrop: 1;
    }
  }
  :root:has(.max-lg\:drawer-open > .drawer-toggle:checked) {
    @media (width >= 64rem) {
      overflow: hidden;
    }
    @media (width >= 64rem) {
      --page-has-backdrop: 1;
    }
  }
  :root:has(.max-xl\:drawer-open > .drawer-toggle:checked) {
    @media (width >= 80rem) {
      overflow: hidden;
    }
    @media (width >= 80rem) {
      --page-has-backdrop: 1;
    }
  }
  :root:has(.max-2xl\:drawer-open > .drawer-toggle:checked) {
    @media (width >= 96rem) {
      overflow: hidden;
    }
    @media (width >= 96rem) {
      --page-has-backdrop: 1;
    }
  }
}
@layer base {
  :root:has( .modal-open, .modal[open], .modal:target, .modal-toggle:checked, .drawer:not(.drawer-open) > .drawer-toggle:checked ) {
    background-image: linear-gradient(var(--root-bg), var(--root-bg));
    background-color: var(--root-bg);
    @supports (color: color-mix(in lab, red, red)) {
      & {
        background-color: color-mix( in srgb, var(--root-bg), oklch(0% 0 0) calc(var(--page-has-backdrop, 0) * 40%) );
      }
    }
    animation: set-page-has-scroll forwards;
    animation-timeline: scroll();
    scrollbar-gutter: stable;
    scrollbar-gutter: if(style(--page-has-scroll: 1): stable; else: unset);
  }
  @keyframes set-page-has-scroll {
    0%, to {
      --page-has-scroll: 1;
    }
  }
}
@layer base {
  :root, [data-theme] {
    background-color: var(--root-bg, var(--color-base-100));
    color: var(--color-base-content);
  }
  :where(:root, [data-theme]) {
    --root-bg: var(--color-base-100);
  }
}
@keyframes rating {
  0%, 40% {
    scale: 1.1;
    filter: brightness(1.05) contrast(1.05);
  }
}
@keyframes dropdown {
  0% {
    opacity: 0;
  }
}
@keyframes radio {
  0% {
    padding: 5px;
  }
  50% {
    padding: 3px;
  }
}
@keyframes toast {
  0% {
    scale: 0.9;
    opacity: 0;
  }
  100% {
    scale: 1;
    opacity: 1;
  }
}
@keyframes skeleton {
  0% {
    background-position: 150%;
  }
  100% {
    background-position: -50%;
  }
}
@keyframes progress {
  50% {
    background-position-x: -115%;
  }
}
@property --tw-translate-x {
  syntax: "*";
  inherits: false;
  initial-value: 0;
}
@property --tw-translate-y {
  syntax: "*";
  inherits: false;
  initial-value: 0;
}
@property --tw-translate-z {
  syntax: "*";
  inherits: false;
  initial-value: 0;
}
@property --tw-rotate-x {
  syntax: "*";
  inherits: false;
}
@property --tw-rotate-y {
  syntax: "*";
  inherits: false;
}
@property --tw-rotate-z {
  syntax: "*";
  inherits: false;
}
@property --tw-skew-x {
  syntax: "*";
  inherits: false;
}
@property --tw-skew-y {
  syntax: "*";
  inherits: false;
}
@property --tw-border-style {
  syntax: "*";
  inherits: false;
  initial-value: solid;
}
@property --tw-font-weight {
  syntax: "*";
  inherits: false;
}
@property --tw-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-shadow-color {
  syntax: "*";
  inherits: false;
}
@property --tw-shadow-alpha {
  syntax: "<percentage>";
  inherits: false;
  initial-value: 100%;
}
@property --tw-inset-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-inset-shadow-color {
  syntax: "*";
  inherits: false;
}
@property --tw-inset-shadow-alpha {
  syntax: "<percentage>";
  inherits: false;
  initial-value: 100%;
}
@property --tw-ring-color {
  syntax: "*";
  inherits: false;
}
@property --tw-ring-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-inset-ring-color {
  syntax: "*";
  inherits: false;
}
@property --tw-inset-ring-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-ring-inset {
  syntax: "*";
  inherits: false;
}
@property --tw-ring-offset-width {
  syntax: "<length>";
  inherits: false;
  initial-value: 0px;
}
@property --tw-ring-offset-color {
  syntax: "*";
  inherits: false;
  initial-value: #fff;
}
@property --tw-ring-offset-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-outline-style {
  syntax: "*";
  inherits: false;
  initial-value: solid;
}
@property --tw-blur {
  syntax: "*";
  inherits: false;
}
@property --tw-brightness {
  syntax: "*";
  inherits: false;
}
@property --tw-contrast {
  syntax: "*";
  inherits: false;
}
@property --tw-grayscale {
  syntax: "*";
  inherits: false;
}
@property --tw-hue-rotate {
  syntax: "*";
  inherits: false;
}
@property --tw-invert {
  syntax: "*";
  inherits: false;
}
@property --tw-opacity {
  syntax: "*";
  inherits: false;
}
@property --tw-saturate {
  syntax: "*";
  inherits: false;
}
@property --tw-sepia {
  syntax: "*";
  inherits: false;
}
@property --tw-drop-shadow {
  syntax: "*";
  inherits: false;
}
@property --tw-drop-shadow-color {
  syntax: "*";
  inherits: false;
}
@property --tw-drop-shadow-alpha {
  syntax: "<percentage>";
  inherits: false;
  initial-value: 100%;
}
@property --tw-drop-shadow-size {
  syntax: "*";
  inherits: false;
}
@property --tw-duration {
  syntax: "*";
  inherits: false;
}
@property --tw-ease {
  syntax: "*";
  inherits: false;
}
@property --tw-text-shadow-color {
  syntax: "*";
  inherits: false;
}
@property --tw-text-shadow-alpha {
  syntax: "<percentage>";
  inherits: false;
  initial-value: 100%;
}
@layer properties {
  @supports ((-webkit-hyphens: none) and (not (margin-trim: inline))) or ((-moz-orient: inline) and (not (color:rgb(from red r g b)))) {
    *, ::before, ::after, ::backdrop {
      --tw-translate-x: 0;
      --tw-translate-y: 0;
      --tw-translate-z: 0;
      --tw-rotate-x: initial;
      --tw-rotate-y: initial;
      --tw-rotate-z: initial;
      --tw-skew-x: initial;
      --tw-skew-y: initial;
      --tw-border-style: solid;
      --tw-font-weight: initial;
      --tw-shadow: 0 0 #0000;
      --tw-shadow-color: initial;
      --tw-shadow-alpha: 100%;
      --tw-inset-shadow: 0 0 #0000;
      --tw-inset-shadow-color: initial;
      --tw-inset-shadow-alpha: 100%;
      --tw-ring-color: initial;
      --tw-ring-shadow: 0 0 #0000;
      --tw-inset-ring-color: initial;
      --tw-inset-ring-shadow: 0 0 #0000;
      --tw-ring-inset: initial;
      --tw-ring-offset-width: 0px;
      --tw-ring-offset-color: #fff;
      --tw-ring-offset-shadow: 0 0 #0000;
      --tw-outline-style: solid;
      --tw-blur: initial;
      --tw-brightness: initial;
      --tw-contrast: initial;
      --tw-grayscale: initial;
      --tw-hue-rotate: initial;
      --tw-invert: initial;
      --tw-opacity: initial;
      --tw-saturate: initial;
      --tw-sepia: initial;
      --tw-drop-shadow: initial;
      --tw-drop-shadow-color: initial;
      --tw-drop-shadow-alpha: 100%;
      --tw-drop-shadow-size: initial;
      --tw-duration: initial;
      --tw-ease: initial;
      --tw-text-shadow-color: initial;
      --tw-text-shadow-alpha: 100%;
    }
  }
}
